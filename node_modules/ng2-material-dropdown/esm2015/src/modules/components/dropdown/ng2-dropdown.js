import * as tslib_1 from "tslib";
import { HostListener, Component, ContentChild, Output, EventEmitter, Input } from '@angular/core';
import { Ng2DropdownButton } from '../button/ng2-dropdown-button';
import { Ng2DropdownMenu } from '../menu/ng2-dropdown-menu';
import { DropdownStateService } from '../../services/dropdown-state.service';
let Ng2Dropdown = class Ng2Dropdown {
    constructor(state) {
        this.state = state;
        this.dynamicUpdate = true;
        // outputs
        this.onItemClicked = new EventEmitter();
        this.onItemSelected = new EventEmitter();
        this.onShow = new EventEmitter();
        this.onHide = new EventEmitter();
    }
    ngOnInit() {
        this.state.dropdownState.onItemClicked.subscribe(item => {
            this.onItemClicked.emit(item);
            if (item.preventClose) {
                return;
            }
            this.hide.call(this);
        });
        if (this.button) {
            this.button.onMenuToggled.subscribe(() => {
                this.toggleMenu();
            });
        }
        this.state.dropdownState.onItemSelected.subscribe(item => {
            this.onItemSelected.emit(item);
        });
        this.state.dropdownState.onItemDestroyed.subscribe((item) => {
            let newSelectedItem;
            const items = this.menu.items.toArray();
            if (item !== this.state.dropdownState.selectedItem) {
                return;
            }
            if (this.menu.focusFirstElement) {
                newSelectedItem =
                    item === items[0] && items.length > 1
                        ? items[1]
                        : items[0];
            }
            this.state.dropdownState.select(newSelectedItem);
        });
    }
    /**
     * @name toggleMenu
     * @desc toggles menu visibility
     */
    toggleMenu(position = this.button.getPosition()) {
        this.state.menuState.isVisible ? this.hide() : this.show(position);
    }
    /**
     * - hides dropdown
     * @name hide
     */
    hide() {
        this.menu.hide();
        this.onHide.emit(this);
    }
    /**
     * - shows dropdown
     * @name show
     * @param position
     */
    show(position = this.button.getPosition()) {
        this.menu.show(position, this.dynamicUpdate);
        this.onShow.emit(this);
    }
    /**
     * @name scrollListener
     */
    scrollListener() {
        if (this.button && this.dynamicUpdate) {
            this.menu.updatePosition(this.button.getPosition(), true);
        }
    }
};
Ng2Dropdown.ctorParameters = () => [
    { type: DropdownStateService }
];
tslib_1.__decorate([
    ContentChild(Ng2DropdownButton, { static: true })
], Ng2Dropdown.prototype, "button", void 0);
tslib_1.__decorate([
    ContentChild(Ng2DropdownMenu, { static: true })
], Ng2Dropdown.prototype, "menu", void 0);
tslib_1.__decorate([
    Input()
], Ng2Dropdown.prototype, "dynamicUpdate", void 0);
tslib_1.__decorate([
    Output()
], Ng2Dropdown.prototype, "onItemClicked", void 0);
tslib_1.__decorate([
    Output()
], Ng2Dropdown.prototype, "onItemSelected", void 0);
tslib_1.__decorate([
    Output()
], Ng2Dropdown.prototype, "onShow", void 0);
tslib_1.__decorate([
    Output()
], Ng2Dropdown.prototype, "onHide", void 0);
tslib_1.__decorate([
    HostListener('window:scroll')
], Ng2Dropdown.prototype, "scrollListener", null);
Ng2Dropdown = tslib_1.__decorate([
    Component({
        selector: 'ng2-dropdown',
        template: `
        <div class="ng2-dropdown-container">
            <ng-content select="ng2-dropdown-button"></ng-content>
            <ng-content select="ng2-dropdown-menu"></ng-content>
        </div>
    `,
        providers: [DropdownStateService]
    })
], Ng2Dropdown);
export { Ng2Dropdown };
//# sourceMappingURL=data:application/json;base64,