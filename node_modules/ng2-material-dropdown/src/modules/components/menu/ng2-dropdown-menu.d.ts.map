{"version":3,"file":"ng2-dropdown-menu.d.ts","sources":["ng2-dropdown-menu.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer2, QueryList } from '@angular/core';\nimport { Ng2MenuItem } from '../menu-item/ng2-menu-item';\nimport { DropdownStateService } from '../../services/dropdown-state.service';\nexport declare class Ng2DropdownMenu {\n    dropdownState: DropdownStateService;\n    private element;\n    private renderer;\n    /**\n     * @name width\n     */\n    width: number;\n    /**\n     * @description if set to true, the first element of the dropdown will be automatically focused\n     * @name focusFirstElement\n     */\n    focusFirstElement: boolean;\n    /**\n     * @description sets dropdown offset from the button\n     * @name offset {string} follow format '<number> <number>' ex. '0 20'\n     */\n    offset: string;\n    /**\n     * @name appendToBody\n     */\n    appendToBody: boolean;\n    /**\n     * @name zIndex\n     */\n    zIndex: number;\n    /**\n     * @name items\n     */\n    items: QueryList<Ng2MenuItem>;\n    private position;\n    private listeners;\n    constructor(dropdownState: DropdownStateService, element: ElementRef, renderer: Renderer2);\n    /**\n     * @name show\n     * @shows menu and selects first item\n     */\n    show(position?: ClientRect, dynamic?: boolean): void;\n    /**\n     * @name hide\n     * @desc hides menu\n     */\n    hide(): void;\n    /**\n     * @name updatePosition\n     * @desc updates the menu position every time it is toggled\n     * @param position {ClientRect}\n     * @param dynamic {boolean}\n     */\n    updatePosition(position: ClientRect, dynamic: boolean): void;\n    /**\n     * @name handleKeypress\n     * @desc executes functions on keyPress based on the key pressed\n     * @param $event\n     */\n    handleKeypress($event: any): void;\n    /**\n     * @name getMenuElement\n     */\n    private getMenuElement;\n    /**\n     * @name calcPositionOffset\n     * @param position\n     */\n    private calcPositionOffset;\n    private applyOffset;\n    ngOnInit(): void;\n    updateOnChange(dynamic?: boolean): void;\n    ngOnDestroy(): void;\n}\n"]}