{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-chips/core/pipes/highlight.pipe.ts","ng://ngx-chips/core/constants/index.ts","ng://ngx-chips/core/providers/drag-provider.ts","ng://ngx-chips/defaults.ts","ng://ngx-chips/core/providers/options-provider.ts","ng://ngx-chips/core/accessor.ts","ng://ngx-chips/core/helpers/listen.ts","ng://ngx-chips/components/tag-input-form/tag-input-form.component.ts","ng://ngx-chips/components/tag/tag-ripple.component.ts","ng://ngx-chips/components/tag/tag.component.ts","ng://ngx-chips/components/tag-input/animations.ts","ng://ngx-chips/components/dropdown/tag-input-dropdown.component.ts","ng://ngx-chips/components/tag-input/tag-input.ts","ng://ngx-chips/components/icon/icon.ts","ng://ngx-chips/tag-input.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__read","o","m","ar","error","HighlightPipe","transform","arg","trim","regex","RegExp","replace","Pipe","name","KEYDOWN","KEYUP","ACTIONS_KEYS","KEY_PRESS_ACTIONS","8","37","39","9","DragProvider","state","dragging","dropping","index","undefined","setDraggedItem","event","tag","dataTransfer","setData","JSON","stringify","getDraggedItem","data","getData","parse","_a","setSender","sender","setReceiver","receiver","onTagDropped","indexDragged","indexDropped","onDragEnd","onRemoveRequested","onAddingRequested","setState","getState","Injectable","defaults","tagInput","separatorKeys","separatorKeyCodes","maxItems","Infinity","placeholder","secondaryPlaceholder","validators","asyncValidators","onlyFromAutocomplete","errorMessages","theme","onTextChangeDebounce","inputId","inputClass","clearOnBlur","hideForm","addOnBlur","addOnPaste","pasteSplitPattern","blinkIfDupe","removable","editable","allowDupes","modelAsStrings","trimTags","ripple","tabIndex","disable","dragZone","onRemoving","onAdding","displayBy","identifyBy","animationDuration","enter","leave","dropdown","appendToBody","offset","focusFirstElement","showDropdownIfEmpty","minimumTextLength","limitItemsTo","keepOpen","dynamicUpdate","zIndex","matchingFn","targetValue","toString","toLowerCase","indexOf","OptionsProvider","setOptions","options","isObject","obj","TagInputAccessor","_items","items","_onChangeCallback","onTouched","_onTouchedCallback","writeValue","registerOnChange","fn","registerOnTouched","getItemValue","item","fromDropdown","property","getItemDisplay","getItemsWithout","filter","position","tslib_1.__decorate","Input","listen","listenerType","action","condition","listeners","Error","TagInputForm","onSubmit","EventEmitter","onBlur","onFocus","onKeyup","onKeydown","inputTextChange","tabindex","disabled","FormControl","text","setValue","emit","ngOnInit","setValidators","setAsyncValidators","form","FormGroup","ngOnChanges","changes","firstChange","currentValue","controls","enable","get","isInputFocused","doc","document","activeElement","input","nativeElement","getErrorMessages","messages","_this","keys","err","hasError","map","hasErrors","dirty","valid","focus","blur","getElementPosition","getBoundingClientRect","destroy","parentElement","removeChild","onKeyDown","$event","inputText","submit","onKeyUp","preventDefault","Output","ViewChild","static","Component","selector","template","TagRipple","animations","trigger","style","width","opacity","transition","animate","keyframes","borderRadius","navigator","window","userAgent","vendor","isChrome","test","TagComponent","element","renderer","cdRef","onSelect","onRemove","onTagEdited","editing","rippleState","model","readonly","select","stopPropagation","remove","move","moving","keydown","keyCode","disableEditMode","blink","classList","add","setTimeout","toggleEditMode","activateEditMode","onBlurred","innerText","getDisplayValue","hasRipple","getContentEditableText","storeNewValue","detectChanges","setContentEditableText","isDeleteIconVisible","getContentEditable","canAddTag","querySelector","TemplateRef","HostBinding","HostListener","ElementRef","Renderer2","ChangeDetectorRef","TagInputDropdown","injector","TagInputComponent","_autocompleteItems","show","maxItemsReached","getFormValue","hasMinimumText","calculatePosition","getMatchingItems","hasItems","isHidden","isVisible","isDisabled","shouldShow","shouldHide","autocompleteObservable","getItemsFromObservable","hide","setItems","requestAdding","createTagModel","catch","resetItems","setLoadingState","pipe","first","subscribe","populateItems","ngAfterViewInit","onItemClicked","onHide","KEEP_OPEN","onTextChange","asObservable","debounceTime","updatePosition","inputForm","menu","dropdownState","menuState","selectedItem","scrollListener","onWindowBlur","formValue","display","dupesAllowed","autocompleteItems","hasValue","tags","some","slice","isLoading","Ng2Dropdown","ContentChildren","QueryList","Injector","CUSTOM_ACCESSOR","DragEvent","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","_super","dragProvider","onAdd","onPaste","onValidationError","constants.KEYDOWN","constants.KEYUP","inputTextValue","errors","appendTag","concat","__spread","createTag","val","isTagValid","fromAutocomplete","dupe","findDupe","find","isFromAutocomplete","assertions","Boolean","onPasteCallback","isIE","clipboardData","type","getText","requests","split","setInputValue","resetInput","all","__","constructor","create","tslib_1.__extends","setUpKeypressListeners","setupSeparatorKeysListener","setUpInputKeydownListeners","observers","setUpTextChangeSubscriber","setUpOnBlurSubscriber","setUpOnPasteListener","statusChanges$","statusChanges","status","isProgressBarVisible$","console","warn","setAnimationMetadata","subscribeFn","removeItem","giveupFocus","addItem","selectItem","selectedTag","fireEvents","eventName","forEach","listener","handleKeydown","which","shiftKey","constants.KEY_PRESS_ACTIONS","constants.ACTIONS_KEYS","moveToTag","isFirstTag","isLastTag","onFormSubmit","_b","emitEvent","getControl","applyFocus","displayAutocomplete","hasCustomTemplate","templates","menuTemplate","onDragStarted","zone","onDragOver","isDropping","isReceiver","onTagBlurred","changedElement","trackBy","updateEditedTag","direction","isLast","isFirst","getTagIndex","getTagAtIndex","last","toArray","findIndex","reset","appendItem","statusUpdate","useSeparatorKeys","hasKeyCode","hasKey","isIMEProcessing","valueChanges","id","animationMetadata","params","ContentChild","descendants","ViewChildren","providers","DeleteIconComponent","optionsProvider","TagInputModule","withDefaults","NgModule","imports","CommonModule","ReactiveFormsModule","FormsModule","Ng2DropdownModule","declarations","exports","COMPOSITION_BUFFER_MODE","useValue"],"mappings":"mlBAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IASrB,IAAIO,EAAW,WAQlB,OAPAA,EAAWN,OAAOO,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIN,KADTK,EAAIG,UAAUF,GACOV,OAAOc,UAAUT,eAAeU,KAAKN,EAAGL,KAAII,EAAEJ,GAAKK,EAAEL,IAE9E,OAAOI,IAEKQ,MAAMC,KAAML,YAazB,SAASM,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2HxB,EAAvHyB,EAAIX,UAAUC,OAAQW,EAAID,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAOtB,OAAOyB,yBAAyBL,EAAQC,GAAOC,EACrH,GAAuB,iBAAZI,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASR,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIZ,EAAIS,EAAWN,OAAS,EAAGH,GAAK,EAAGA,KAASZ,EAAIqB,EAAWT,MAAIc,GAAKD,EAAI,EAAIzB,EAAE0B,GAAKD,EAAI,EAAIzB,EAAEsB,EAAQC,EAAKG,GAAK1B,EAAEsB,EAAQC,KAASG,GAChJ,OAAOD,EAAI,GAAKC,GAAKxB,OAAO4B,eAAeR,EAAQC,EAAKG,GAAIA,EAOzD,SAASK,EAAWC,EAAaC,GACpC,GAAuB,iBAAZL,SAAoD,mBAArBA,QAAQM,SAAyB,OAAON,QAAQM,SAASF,EAAaC,GAG7G,SAASE,EAAUC,EAASC,EAAYC,EAAGC,GAC9C,OAAO,IAAKD,IAAMA,EAAIE,UAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,SAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAAUA,EAAOC,KAAOT,EAAQQ,EAAOL,OAAS,IAAIN,EAAE,SAAUG,GAAWA,EAAQQ,EAAOL,SAAWO,KAAKR,EAAWK,GACnIH,GAAMN,EAAYA,EAAUrB,MAAMkB,EAASC,GAAc,KAAKS,UAI/D,SAASM,EAAYhB,EAASiB,GACjC,IAAsGC,EAAGC,EAAG7C,EAAG8C,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPjD,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOkD,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEV,KAAMgB,EAAK,GAAIC,QAASD,EAAK,GAAIE,SAAUF,EAAK,IAAwB,mBAAXG,SAA0BT,EAAES,OAAOC,UAAY,WAAa,OAAO/C,OAAUqC,EACvJ,SAASM,EAAKjD,GAAK,OAAO,SAAUsD,GAAK,OACzC,SAAcC,GACV,GAAId,EAAG,MAAM,IAAIe,UAAU,mCAC3B,KAAOZ,GAAG,IACN,GAAIH,EAAI,EAAGC,IAAM7C,EAAY,EAAR0D,EAAG,GAASb,EAAU,UAAIa,EAAG,GAAKb,EAAS,YAAO7C,EAAI6C,EAAU,YAAM7C,EAAEO,KAAKsC,GAAI,GAAKA,EAAET,SAAWpC,EAAIA,EAAEO,KAAKsC,EAAGa,EAAG,KAAKlB,KAAM,OAAOxC,EAE3J,OADI6C,EAAI,EAAG7C,IAAG0D,EAAK,CAAS,EAARA,EAAG,GAAQ1D,EAAEkC,QACzBwB,EAAG,IACP,KAAK,EAAG,KAAK,EAAG1D,EAAI0D,EAAI,MACxB,KAAK,EAAc,OAAXX,EAAEC,QAAgB,CAAEd,MAAOwB,EAAG,GAAIlB,MAAM,GAChD,KAAK,EAAGO,EAAEC,QAASH,EAAIa,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKX,EAAEI,IAAIS,MAAOb,EAAEG,KAAKU,MAAO,SACxC,QACI,KAAkB5D,GAAZA,EAAI+C,EAAEG,MAAY7C,OAAS,GAAKL,EAAEA,EAAEK,OAAS,MAAkB,IAAVqD,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEX,EAAI,EAAG,SACjG,GAAc,IAAVW,EAAG,MAAc1D,GAAM0D,EAAG,GAAK1D,EAAE,IAAM0D,EAAG,GAAK1D,EAAE,IAAM,CAAE+C,EAAEC,MAAQU,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYX,EAAEC,MAAQhD,EAAE,GAAI,CAAE+C,EAAEC,MAAQhD,EAAE,GAAIA,EAAI0D,EAAI,MAC7D,GAAI1D,GAAK+C,EAAEC,MAAQhD,EAAE,GAAI,CAAE+C,EAAEC,MAAQhD,EAAE,GAAI+C,EAAEI,IAAIU,KAAKH,GAAK,MACvD1D,EAAE,IAAI+C,EAAEI,IAAIS,MAChBb,EAAEG,KAAKU,MAAO,SAEtBF,EAAKf,EAAKpC,KAAKmB,EAASqB,GAC1B,MAAOV,GAAKqB,EAAK,CAAC,EAAGrB,GAAIQ,EAAI,EAAI,QAAWD,EAAI5C,EAAI,EACtD,GAAY,EAAR0D,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAExB,MAAOwB,EAAG,GAAKA,EAAG,QAAK,EAAQlB,MAAM,GArB9BL,CAAK,CAAChC,EAAGsD,MAwCtD,SAASK,EAAOC,EAAG5D,GACtB,IAAI6D,EAAsB,mBAAXT,QAAyBQ,EAAER,OAAOC,UACjD,IAAKQ,EAAG,OAAOD,EACf,IAAmB/C,EAAYqB,EAA3BnC,EAAI8D,EAAEzD,KAAKwD,GAAOE,EAAK,GAC3B,IACI,WAAc,IAAN9D,GAAgBA,KAAM,MAAQa,EAAId,EAAEkC,QAAQI,MAAMyB,EAAGJ,KAAK7C,EAAEkB,OAExE,MAAOgC,GAAS7B,EAAI,CAAE6B,MAAOA,GACjC,QACQ,IACQlD,IAAMA,EAAEwB,OAASwB,EAAI9D,EAAU,YAAI8D,EAAEzD,KAAKL,GAE1D,QAAkB,GAAImC,EAAG,MAAMA,EAAE6B,OAE7B,OAAOD,ECjIX,iBAKA,SAAAE,KAkBA,OAZWA,EAAA7D,UAAA8D,UAAP,SAAiBlC,EAAemC,GAC5B,IAAKA,EAAIC,OACL,OAAOpC,EAGX,IACI,IAAMqC,EAAQ,IAAIC,OAAO,IAAWH,EAjB1BI,QAAQ,yBAA0B,QAiBJ,IAAK,KAC7C,OAAOvC,EAAMuC,QAAQF,EAAO,aAC9B,MAAOlC,GACL,OAAOH,IAfNiC,EAAazD,EAAA,CAHzBgE,EAAAA,KAAK,CACFC,KAAM,eAEGR,MCDAS,EAAU,UACVC,EAAQ,QAIRC,EACD,SADCA,EAEI,cAFJA,EAGI,cAHJA,EAIJ,MAGIC,EAAoB,CAC7BC,EAAGF,EACHG,GAAIH,EACJI,GAAIJ,EACJK,EAAGL,gBCDP,SAAAM,IAKW3E,KAAA4E,MAAe,CAClBC,UAAU,EACVC,UAAU,EACVC,MAAOC,WAoFf,OA5EWL,EAAA9E,UAAAoF,eAAP,SAAsBC,EAAkBC,GAChCD,GAASA,EAAME,cACfF,EAAME,aAAaC,QDdE,OCcyBC,KAAKC,UAAUJ,KAQ9DR,EAAA9E,UAAA2F,eAAP,SAAsBN,GAClB,GAAIA,GAASA,EAAME,aAAc,CAC7B,IAAMK,EAAOP,EAAME,aAAaM,QDxBX,QCyBrB,IACI,OAAOJ,KAAKK,MAAMF,GACpB,MAAAG,GACE,UASLjB,EAAA9E,UAAAgG,UAAP,SAAiBC,GACb9F,KAAK8F,OAASA,GAOXnB,EAAA9E,UAAAkG,YAAP,SAAmBC,GACfhG,KAAKgG,SAAWA,GASbrB,EAAA9E,UAAAoG,aAAP,SAAoBd,EAAee,EAAsBC,GACrDnG,KAAKoG,YAELpG,KAAK8F,OAAOO,kBAAkBlB,EAAKe,GACnClG,KAAKgG,SAASM,mBAAkB,EAAOnB,EAAKgB,IAOzCxB,EAAA9E,UAAA0G,SAAP,SAAgB3B,GACZ5E,KAAK4E,MAAKvF,EAAA,GAAQW,KAAK4E,MAAUA,IAO9BD,EAAA9E,UAAA2G,SAAP,SAAgBpG,GACZ,OAAOA,EAAMJ,KAAK4E,MAAMxE,GAAOJ,KAAK4E,OAMjCD,EAAA9E,UAAAuG,UAAP,WACIpG,KAAKuG,SAAS,CACV1B,UAAU,EACVC,UAAU,EACVC,MAAOC,aAxFNL,EAAY1E,EAAA,CADxBwG,EAAAA,cACY9B,MCuCA+B,EAAW,CACpBC,SAA2B,CACvBC,cAAe,GACfC,kBAAmB,GACnBC,SAAUC,SACVC,YF9DmB,QE+DnBC,qBF9D6B,kBE+D7BC,WAAY,GACZC,gBAAiB,GACjBC,sBAAsB,EACtBC,cAAe,GACfC,MAAO,GACPC,qBAAsB,IACtBC,QAAS,KACTC,WAAY,GACZC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,kBAAmB,IACnBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,YAAY,EACZC,gBAAgB,EAChBC,UAAU,EACVC,QAAQ,EACRC,SAAU,GACVC,SAAS,EACTC,SAAU,GACVC,WAAYzD,UACZ0D,SAAU1D,UACV2D,UAAW,UACXC,WAAY,QACZC,kBAAmB,CACfC,MAAO,QACPC,MAAO,UAGfC,SAAmC,CAC/BL,UAAW,UACXC,WAAY,QACZK,cAAc,EACdC,OAAQ,OACRC,mBAAmB,EACnBC,qBAAqB,EACrBC,kBAAmB,EACnBC,aAAcvC,SACdwC,UAAU,EACVC,eAAe,EACfC,OAAQ,IACRC,WAUR,SAA4CjI,EAAetB,GACvD,IAAMwJ,EAAcxJ,EAAOH,KAAK2I,WAAWiB,WAE3C,OAAOD,GAAeA,EACjBE,cACAC,QAAQrI,EAAMoI,gBAAkB,KCpHzC,IAAAE,EAAA,WAAA,SAAAA,KAOA,OAJWA,EAAAlK,UAAAmK,WAAP,SAAkBC,GACdF,EAAgBrD,SAASC,SAAQtH,EAAA,GAAOqH,EAASC,SAAasD,EAAQtD,UACtEoD,EAAgBrD,SAASsC,SAAQ3J,EAAA,GAAOqH,EAASsC,SAAaiB,EAAQjB,WAJ5De,EAAArD,SAAWA,EAM7BqD,EAPA,YCAgBG,EAASC,GACrB,OAAOA,IAAQpL,OAAOoL,GAG1B,IAAAC,EAAA,WAAA,SAAAA,IACYpK,KAAAqK,OAAqB,GASbrK,KAAA2I,UAAoBoB,EAAgBrD,SAASC,SAASgC,UAKtD3I,KAAA4I,WAAqBmB,EAAgBrD,SAASC,SAASiC,WAsD3E,OApDI7J,OAAA4B,eAAWyJ,EAAAvK,UAAA,QAAK,KAAhB,WACI,OAAOG,KAAKqK,YAGhB,SAAiBC,GACbtK,KAAKqK,OAASC,EACdtK,KAAKuK,kBAAkBvK,KAAKqK,yCAGzBD,EAAAvK,UAAA2K,UAAP,WACIxK,KAAKyK,sBAGFL,EAAAvK,UAAA6K,WAAP,SAAkBJ,GACdtK,KAAKqK,OAASC,GAAS,IAGpBF,EAAAvK,UAAA8K,iBAAP,SAAwBC,GACpB5K,KAAKuK,kBAAoBK,GAGtBR,EAAAvK,UAAAgL,kBAAP,SAAyBD,GACrB5K,KAAKyK,mBAAqBG,GAQvBR,EAAAvK,UAAAiL,aAAP,SAAoBC,EAAgBC,QAAA,IAAAA,IAAAA,GAAA,GAChC,IAAMC,EAAWD,GAAgBhL,KAAKgJ,SAAWhJ,KAAKgJ,SAASJ,WAAa5I,KAAK4I,WACjF,OAAOsB,EAASa,GAAQA,EAAKE,GAAYF,GAQtCX,EAAAvK,UAAAqL,eAAP,SAAsBH,EAAgBC,QAAA,IAAAA,IAAAA,GAAA,GAClC,IAAMC,EAAWD,GAAgBhL,KAAKgJ,SAAWhJ,KAAKgJ,SAASL,UAAY3I,KAAK2I,UAChF,OAAOuB,EAASa,GAAQA,EAAKE,GAAYF,GAOnCX,EAAAvK,UAAAsL,gBAAV,SAA0BpG,GACtB,OAAO/E,KAAKsK,MAAMc,OAAO,SAACL,EAAMM,GAAa,OAAAA,IAAatG,KAzDrDuG,EAAAA,CAARC,EAAAA,iEAKQD,EAAAA,CAARC,EAAAA,kEAsDLnB,EArEA,GCRA,SAAgBoB,EAAOC,EAAsBC,EAAmBC,GAE5D,QAF4D,IAAAA,IAAAA,GAAA,IAEvD3L,KAAK4L,UAAUxM,eAAeqM,GAC/B,MAAM,IAAII,MAAM,kCAIfF,GAKL3L,KAAK4L,UAAUH,GAAcrI,KAAKsI,oBChBtC,SAAAI,IASqB9L,KAAA+L,SAA8B,IAAIC,EAAAA,aAKlChM,KAAAiM,OAA4B,IAAID,EAAAA,aAKhChM,KAAAkM,QAA6B,IAAIF,EAAAA,aAKjChM,KAAAmM,QAA6B,IAAIH,EAAAA,aAKjChM,KAAAoM,UAA+B,IAAIJ,EAAAA,aAKnChM,KAAAqM,gBAAwC,IAAIL,EAAAA,aAY7ChM,KAAAkH,WAA4B,GAM5BlH,KAAAmH,gBAAsC,GAgBtCnH,KAAAsM,SAAW,GAKXtM,KAAAuM,UAAW,EA8BVvM,KAAA+K,KAAoB,IAAIyB,EAAAA,YAAY,CAAE/K,MAAO,GAAI8K,SAAUvM,KAAKuM,WAkHrF,OAhIIxN,OAAA4B,eAAWmL,EAAAjM,UAAA,YAAS,KAApB,WACI,OAAOG,KAAK+K,KAAKtJ,WAOrB,SAAqBgL,GACjBzM,KAAK+K,KAAK2B,SAASD,GAEnBzM,KAAKqM,gBAAgBM,KAAKF,oCAK9BX,EAAAjM,UAAA+M,SAAA,WACI5M,KAAK+K,KAAK8B,cAAc7M,KAAKkH,YAC7BlH,KAAK+K,KAAK+B,mBAAmB9M,KAAKmH,iBAGlCnH,KAAK+M,KAAO,IAAIC,EAAAA,UAAU,CACtBjC,KAAM/K,KAAK+K,QAInBe,EAAAjM,UAAAoN,YAAA,SAAYC,GACJA,EAAQX,WAAaW,EAAQX,SAASY,cAClCD,EAAQX,SAASa,aACjBpN,KAAK+M,KAAKM,SAAe,KAAE9E,UAE3BvI,KAAK+M,KAAKM,SAAe,KAAEC,WAQvCvO,OAAA4B,eAAWmL,EAAAjM,UAAA,QAAK,KAAhB,WACI,OAAOG,KAAK+M,KAAKQ,IAAI,yCAMlBzB,EAAAjM,UAAA2N,eAAP,WACI,IAAMC,EAA0B,oBAAbC,SAA2BA,SAAW1I,UACzD,QAAOyI,GAAMA,EAAIE,gBAAkB3N,KAAK4N,MAAMC,eAO3C/B,EAAAjM,UAAAiO,iBAAP,SAAwBC,GAAxB,IAAAC,EAAAhO,KACI,OAAOjB,OAAOkP,KAAKF,GACd3C,OAAO,SAAA8C,GAAO,OAAAF,EAAKvM,MAAM0M,SAASD,KAClCE,IAAI,SAAAF,GAAO,OAAAH,EAASG,MAMtBpC,EAAAjM,UAAAwO,UAAP,WACU,IAAAzI,EAAA5F,KAAA+M,KAAEuB,EAAA1I,EAAA0I,MAAO7M,EAAAmE,EAAAnE,MAAO8M,EAAA3I,EAAA2I,MACtB,OAAOD,GAAS7M,EAAMsJ,OAASwD,GAM5BzC,EAAAjM,UAAA2O,MAAP,WACIxO,KAAK4N,MAAMC,cAAcW,SAMtB1C,EAAAjM,UAAA4O,KAAP,WACIzO,KAAK4N,MAAMC,cAAcY,QAMtB3C,EAAAjM,UAAA6O,mBAAP,WACI,OAAO1O,KAAK4N,MAAMC,cAAcc,yBAO7B7C,EAAAjM,UAAA+O,QAAP,WACI,IAAMhB,EAAQ5N,KAAK4N,MAAMC,cACzBD,EAAMiB,cAAcC,YAAYlB,IAO7B9B,EAAAjM,UAAAkP,UAAP,SAAiBC,GAEb,GADAhP,KAAKiP,UAAYjP,KAAKyB,MAAMA,MACT,UAAfuN,EAAO5O,IAGT,OAAOJ,KAAKoM,UAAUO,KAAKqC,GAFzBhP,KAAKkP,OAAOF,IAUblD,EAAAjM,UAAAsP,QAAP,SAAeH,GAEX,OADAhP,KAAKiP,UAAYjP,KAAKyB,MAAMA,MACrBzB,KAAKmM,QAAQQ,KAAKqC,IAMtBlD,EAAAjM,UAAAqP,OAAP,SAAcF,GACVA,EAAOI,iBACPpP,KAAK+L,SAASY,KAAKqC,IA9Mb1D,EAAAA,CAAT+D,EAAAA,yBAA0BrD,EAAAA,8CAKjBV,EAAAA,CAAT+D,EAAAA,yBAAwBrD,EAAAA,4CAKfV,EAAAA,CAAT+D,EAAAA,yBAAyBrD,EAAAA,6CAKhBV,EAAAA,CAAT+D,EAAAA,yBAAyBrD,EAAAA,6CAKhBV,EAAAA,CAAT+D,EAAAA,yBAA2BrD,EAAAA,+CAKlBV,EAAAA,CAAT+D,EAAAA,yBAAiCrD,EAAAA,qDAOzBV,EAAAA,CAARC,EAAAA,mEAKQD,EAAAA,CAARC,EAAAA,iEAMQD,EAAAA,CAARC,EAAAA,sEAKQD,EAAAA,CAARC,EAAAA,+DAKQD,EAAAA,CAARC,EAAAA,kEAMQD,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,gEAKsCD,EAAAA,CAAtCgE,EAAAA,UAAU,QAAS,CAAEC,UAAQ,yDAW9BjE,EAAAA,CADCC,EAAAA,+FAnFQO,EAAY7L,EAAA,CALxBuP,EAAAA,UAAU,CACPC,SAAU,iBAEVC,SAAA,+nJAES5D,mBCOb,SAAA6D,IAqCoB3P,KAAA4E,MAAQ,OAC5B,OADa0G,EAAAA,CAARC,EAAAA,6DADQoE,EAAS1P,EAAA,CApCrBuP,EAAAA,UAAU,CACPC,SAAU,aAmBVC,SAAU,gEAGVE,WAAY,CACRC,EAAAA,QAAQ,MAAO,CACXjL,EAAAA,MAAM,OAAQkL,EAAAA,MAAM,CAACC,MAAO,EAAGC,QAAS,KACxCC,EAAAA,WAAW,kBAAmB,CAC1BC,EAAAA,QAAQ,IAAKC,EAAAA,UAAU,CACnBL,EAAAA,MAAM,CAACE,QAAS,EAAG9G,OAAQ,EAAG6G,MAAO,MAAOK,aAAc,SAC1DN,EAAAA,MAAM,CAACE,QAAS,EAAG9G,OAAQ,GAAK6G,MAAO,QACvCD,EAAAA,MAAM,CAACE,QAAS,GAAK9G,OAAQ,EAAG6G,MAAO,OAAQK,aAAc,yBA5BpE,+ZAkCAT,MChCPU,EAA8B,oBAAXC,OAAyBA,OAAOD,UAAY,CACjEE,UAAW,SACXC,OAAQ,cAGNC,EAAW,SAASC,KAAKL,EAAUE,YAAc,aAAaG,KAAKL,EAAUG,QAOnFG,EAAA,WAwHI,SAAAA,EACWC,EACAC,EACCC,GAFD9Q,KAAA4Q,QAAAA,EACA5Q,KAAA6Q,SAAAA,EACC7Q,KAAA8Q,MAAAA,EAtEL9Q,KAAAuM,UAAW,EAYXvM,KAAA+Q,SAAmC,IAAI/E,EAAAA,aAMvChM,KAAAgR,SAAmC,IAAIhF,EAAAA,aAMvChM,KAAAiM,OAAiC,IAAID,EAAAA,aAMrChM,KAAA+O,UAA+B,IAAI/C,EAAAA,aAMnChM,KAAAiR,YAAsC,IAAIjF,EAAAA,aAY1ChM,KAAAkR,SAAU,EAWVlR,KAAAmR,YAAc,OAsOzB,OAxPIpS,OAAA4B,eAAWgQ,EAAA9Q,UAAA,WAAQ,KAAnB,WACI,MAA6B,iBAAfG,KAAKoR,QAA8C,IAAxBpR,KAAKoR,MAAMC,0CAkCjDV,EAAA9Q,UAAAyR,OAAP,SAActC,GACNhP,KAAKqR,UAAYrR,KAAKuM,WAItByC,GACAA,EAAOuC,kBAGXvR,KAAKwO,QAELxO,KAAK+Q,SAASpE,KAAK3M,KAAKoR,SAMrBT,EAAA9Q,UAAA2R,OAAP,SAAcxC,GACVA,EAAOuC,kBACPvR,KAAKgR,SAASrE,KAAK3M,OAMhB2Q,EAAA9Q,UAAA2O,MAAP,WACIxO,KAAK4Q,QAAQ/C,cAAcW,SAGxBmC,EAAA9Q,UAAA4R,KAAP,WACIzR,KAAK0R,QAAS,GAQXf,EAAA9Q,UAAA8R,QAAP,SAAezM,GACX,GAAIlF,KAAKkR,SACL,GAAsB,KAAlBhM,EAAM0M,QACN,OAAO5R,KAAK6R,gBAAgB3M,QAGhClF,KAAK+O,UAAUpC,KAAK,CAAEzH,MAAKA,EAAEkM,MAAOpR,KAAKoR,SAO1CT,EAAA9Q,UAAAiS,MAAP,WACI,IAAMC,EAAY/R,KAAK4Q,QAAQ/C,cAAckE,UAC7CA,EAAUC,IAAI,SAEdC,WAAW,WAAM,OAAAF,EAAUP,OAAO,UAAU,KAMzCb,EAAA9Q,UAAAqS,eAAP,WACI,GAAIlS,KAAKiI,SACL,OAAOjI,KAAKkR,QAAUlM,UAAYhF,KAAKmS,oBAQxCxB,EAAA9Q,UAAAuS,UAAP,SAAiBlN,SAGb,GAAKlF,KAAKiI,SAAV,CAIAjI,KAAK6R,kBAEL,IAAMpQ,EAAgByD,EAAM/E,OAAOkS,UAC7BvQ,EACoB,iBAAf9B,KAAKoR,MACN3P,OACKzB,KAAKoR,QAAKxL,EAAA,IAAG5F,KAAK2I,WAAYlH,EAAKmE,IAElD5F,KAAKiM,OAAOU,KAAK7K,KAOd6O,EAAA9Q,UAAAyS,gBAAP,SAAuBvH,GACnB,MAAuB,iBAATA,EAAoBA,EAAOA,EAAK/K,KAAK2I,YAQvD5J,OAAA4B,eAAWgQ,EAAA9Q,UAAA,kBAAe,KAA1B,WACI,OAAQG,KAAKqR,WAAarR,KAAKkR,SAAWT,GAAYzQ,KAAKuS,2CAOxD5B,EAAA9Q,UAAAgS,gBAAP,SAAuB7C,GACnB,IAAM+C,EAAY/R,KAAK4Q,QAAQ/C,cAAckE,UACvCnE,EAAQ5N,KAAKwS,yBAEnBxS,KAAKkR,SAAU,EACfa,EAAUP,OAAO,gBAEZ5D,GAKL5N,KAAKyS,cAAc7E,GACnB5N,KAAK8Q,MAAM4B,gBAEP1D,GACAA,EAAOI,kBARPpP,KAAK2S,uBAAuB3S,KAAKoR,QAelCT,EAAA9Q,UAAA+S,oBAAP,WACI,OACK5S,KAAKqR,WAAarR,KAAKuM,UAAYvM,KAAKgI,YAAchI,KAAKkR,SAO5DP,EAAA9Q,UAAA2S,uBAAR,WACI,IAAM5E,EAAQ5N,KAAK6S,qBAEnB,OAAOjF,EAAQA,EAAMyE,UAAUxO,OAAS,IAOpC8M,EAAA9Q,UAAA8S,uBAAR,SAA+BvB,GAC3B,IAAMxD,EAAQ5N,KAAK6S,qBACbpR,EAAQzB,KAAKsS,gBAAgBlB,GAEnCxD,EAAMyE,UAAY5Q,GAMdkP,EAAA9Q,UAAAsS,iBAAR,WACsBnS,KAAK4Q,QAAQ/C,cAAckE,UACnCC,IAAI,gBAEdhS,KAAKkR,SAAU,GAOXP,EAAA9Q,UAAA4S,cAAR,SAAsB7E,SAAtBI,EAAAhO,KAYI,GAV0B,iBADVmF,EAWLnF,KAAKoR,OATNjM,IAAQyI,EACRzI,EAAI6I,EAAKrF,aAAeiF,EAQlC,CAXe,IAACzI,EAeViM,EACoB,iBAAfpR,KAAKoR,MACNxD,OAEI7I,MAAO/E,KAAK+E,QACX/E,KAAK4I,YAbToF,EAAKoD,MAAMpD,EAAKpF,cAAgBoF,EAAKoD,MAAMpD,EAAKrF,WAcvC3I,KAAKoR,MAAMpR,KAAK4I,YAChBgF,EACNhI,EAAC5F,KAAK2I,WAAYiF,KAG5B5N,KAAK8S,UAAU1B,GACfpR,KAAKiR,YAAYtE,KAAK,CAAExH,IAAKiM,EAAOrM,MAAO/E,KAAK+E,QAEhD/E,KAAK2S,uBAAuB3S,KAAKoR,SAOjCT,EAAA9Q,UAAAgT,mBAAR,WACI,OAAO7S,KAAK4Q,QAAQ/C,cAAckF,cAAc,sBA/UpDzH,EAAAA,CADCC,EAAAA,6DAODD,EAAAA,CADCC,EAAAA,kEAODD,EAAAA,CADCC,EAAAA,iEAODD,EAAAA,CADCC,EAAAA,wBACgByH,EAAAA,6CAMjB1H,EAAAA,CADCC,EAAAA,iEAODD,EAAAA,CADCC,EAAAA,kEAODD,EAAAA,CADCC,EAAAA,6DAODD,EAAAA,CADCC,EAAAA,kEAODD,EAAAA,CADCC,EAAAA,gEAODD,EAAAA,CADCC,EAAAA,mEAODD,EAAAA,CADC+D,EAAAA,yBACgBrD,EAAAA,8CAMjBV,EAAAA,CADC+D,EAAAA,yBACgBrD,EAAAA,8CAMjBV,EAAAA,CADC+D,EAAAA,yBACcrD,EAAAA,4CAMfV,EAAAA,CADC+D,EAAAA,yBACiBrD,EAAAA,+CAMlBV,EAAAA,CADC+D,EAAAA,yBACmBrD,EAAAA,iDAkBpBV,EAAAA,CADC2H,EAAAA,YAAY,uEAYb3H,EAAAA,CADCgE,EAAAA,UAAUK,EAAW,CAAEJ,UAAQ,oBACjBI,iCAiDfrE,EAAAA,CADC4H,EAAAA,aAAa,UAAW,CAAC,gIAtKjBvC,EAAY1Q,EAAA,CALxBuP,EAAAA,UAAU,CACPC,SAAU,MACVC,SAAA,m9DA4HoByD,EAAAA,WACCC,EAAAA,UACFC,EAAAA,qBA3HV1C,GAAb,GClBaf,EAAa,CACtBC,EAAAA,QAAQ,YAAa,CACjBjL,EAAAA,MAAM,KAAMkL,EAAAA,MAAM,CACdE,QAAS,KAEbpL,EAAAA,MAAM,MAAOkL,EAAAA,MAAM,CACfE,QAAS,KAEbC,EAAAA,WAAW,SAAU,CACjBC,EAAAA,QAAQ,cAAeC,EAAAA,UAAU,CAC7BL,EAAAA,MAAM,CAACE,QAAS,EAAG9G,OAAQ,EAAGvF,UAAW,yBACzCmM,EAAAA,MAAM,CAACE,QAAS,GAAK9G,OAAQ,GAAKvF,UAAW,0BAC7CmM,EAAAA,MAAM,CAACE,QAAS,GAAK9G,OAAQ,GAAKvF,UAAW,wBAC7CmM,EAAAA,MAAM,CAACE,QAAS,IAAM9G,OAAQ,IAAMvF,UAAW,wBAC/CmM,EAAAA,MAAM,CAACE,QAAS,EAAG9G,OAAQ,EAAGvF,UAAW,6BAGjDsM,EAAAA,WAAW,SAAU,CACjBC,EAAAA,QAAQ,cAAeC,EAAAA,UAAU,CAC7BL,EAAAA,MAAM,CAACE,QAAS,EAAGrM,UAAW,gBAAiBuF,OAAQ,IACvD4G,EAAAA,MAAM,CAACE,QAAS,EAAGrM,UAAW,oBAAqBuF,OAAQ,KAC3D4G,EAAAA,MAAM,CAACE,QAAS,EAAGrM,UAAW,mBAAoBuF,OAAQ,yBCyHxE,SAAAoK,EAA6BC,GAA7B,IAAAvF,EAAAhO,KAA6BA,KAAAuT,SAAAA,EAlHbvT,KAAAkJ,OAAiBxC,EAASsC,SAASE,OAKnClJ,KAAAmJ,kBAAoBzC,EAASsC,SAASG,kBAMtCnJ,KAAAoJ,oBAAsB1C,EAASsC,SAASI,oBAYxCpJ,KAAAqJ,kBAAoB3C,EAASsC,SAASK,kBAMtCrJ,KAAAsJ,aAAuB5C,EAASsC,SAASM,aAKzCtJ,KAAA2I,UAAYjC,EAASsC,SAASL,UAK9B3I,KAAA4I,WAAalC,EAASsC,SAASJ,WAM/B5I,KAAA0J,WACdhD,EAASsC,SAASU,WAKJ1J,KAAAiJ,aAAevC,EAASsC,SAASC,aAMjCjJ,KAAAuJ,SAAW7C,EAASsC,SAASO,SAK7BvJ,KAAAwJ,cAAgB9C,EAASsC,SAASQ,cAKlCxJ,KAAAyJ,OAAS/C,EAASsC,SAASS,OAMpCzJ,KAAAsK,MAAoB,GAKpBtK,KAAA2G,SAA8B3G,KAAKuT,SAAShG,IAAIiG,GAK/CxT,KAAAyT,mBAAiC,GA8GlCzT,KAAA0T,KAAO,WACZ,IAAMC,EACJ3F,EAAKrH,SAAS2D,MAAM1K,SAAWoO,EAAKrH,SAASG,SACzCrF,EAAQuM,EAAK4F,eACbC,EAAiBpS,EAAMoC,OAAOjE,QAAUoO,EAAK3E,kBAC7CgC,EAAW2C,EAAK8F,oBAChBxJ,EAAQ0D,EAAK+F,iBAAiBtS,GAC9BuS,EAAW1J,EAAM1K,OAAS,EAC1BqU,GAA8B,IAAnBjG,EAAKkG,UAChB9K,EAAsB4E,EAAK5E,qBAAuB4K,IAAavS,EAC/D0S,EAAanG,EAAKrH,SAAS4B,QAE3B6L,EACJH,IAAcD,GAAYH,GAAmBzK,GACzCiL,EAAarG,EAAKkG,YAAcF,EAEtC,OAAIhG,EAAKsG,wBAA0BT,EAC1B7F,EAAKuG,uBAAuB9S,IAIjCuM,EAAK5E,sBAAwB3H,GAC/BkS,GACAQ,EAEOnG,EAAKhF,SAASwL,QAGvBxG,EAAKyG,SAASnK,QAEV8J,EACFpG,EAAKhF,SAAS0K,KAAKrI,GACVgJ,GACTrG,EAAKwG,UAmDDxU,KAAA0U,cAAgB,SAAO3J,GAAiB,OAAA/J,EAAAgN,OAAA,OAAA,EAAA,kEAE9C,OADM7I,EAAMnF,KAAK2U,eAAe5J,GAChC,CAAA,EAAM/K,KAAK2G,SAASL,mBAAkB,EAAMnB,GAAKyP,SAAM,6BAAvDhP,EAAApD,iBAwDMxC,KAAA6U,WAAa,WACnB7G,EAAK1D,MAAQ,IAwBPtK,KAAAuU,uBAAyB,SAAC9H,GAChCuB,EAAK8G,iBAAgB,GAiBrB9G,EAAKsG,uBAAuB7H,GACzBsI,KAAKC,EAAAA,SACLC,UAjBiB,SAACxP,GAEnBuI,EAAK8G,iBAAgB,GAElBI,cAAczP,GAEjBuI,EAAKyG,SAASzG,EAAK+F,iBAAiBtH,IAEhCuB,EAAK1D,MAAM1K,OACboO,EAAKhF,SAAS0K,KAAK1F,EAAK8F,qBAExB9F,EAAKhF,SAASwL,QAMQ,WAAM,OAAAxG,EAAK8G,iBAAgB,MAYzD,OA/SE/V,OAAA4B,eAAW2S,EAAAzT,UAAA,oBAAiB,KAQnB,WAAT,IAAAmO,EAAAhO,KACQsK,EAAQtK,KAAKyT,mBAEnB,OAAKnJ,EAIEA,EAAM8D,IAAI,SAACrD,SAChB,MAAuB,iBAATA,UAEPiD,EAAKrF,WAAYoC,EAClBnF,EAACoI,EAAKpF,YAAamC,KAErBA,IATG,QAZX,SAA6BT,GAC3BtK,KAAKyT,mBAAqBnJ,mCA6B5BgJ,EAAAzT,UAAAsV,gBAAA,WAAA,IAAAnH,EAAAhO,KACEA,KAAKoV,gBAAgBH,UAAU,SAAClK,GAC9BiD,EAAK0G,cAAc3J,KAIrB/K,KAAKqV,SAASJ,UAAUjV,KAAK6U,YAE7B,IACMS,EAAYtV,KAAKuJ,SAEvBvJ,KAAK2G,SAAS4O,aACXC,eACAT,KACCU,EAAAA,aANkB,KAOlBrK,EAAAA,OAAO,SAAC3J,GACN,OAAkB,IAAd6T,GACK7T,EAAM7B,OAAS,KAM3BqV,UAAUjV,KAAK0T,OAMbJ,EAAAzT,UAAA6V,eAAP,WACE,IAAMrK,EAAWrL,KAAK2G,SAASgP,UAAUjH,qBAEzC1O,KAAKgJ,SAAS4M,KAAKF,eAAerK,EAAUrL,KAAKwJ,gBAMnDzK,OAAA4B,eAAW2S,EAAAzT,UAAA,YAAS,KAApB,WACE,OAAOG,KAAKgJ,SAAS4M,KAAKC,cAAcC,UAAU5B,2CAM7CZ,EAAAzT,UAAAwV,OAAP,WACE,OAAOrV,KAAKgJ,SAASqM,QAMhB/B,EAAAzT,UAAAuV,cAAP,WACE,OAAOpV,KAAKgJ,SAASoM,eAMvBrW,OAAA4B,eAAW2S,EAAAzT,UAAA,eAAY,KAAvB,WACE,OAAOG,KAAKgJ,SAAS4M,KAAKC,cAAcA,cAAcE,8CAMxDhX,OAAA4B,eAAW2S,EAAAzT,UAAA,QAAK,KAAhB,WACE,OAAOG,KAAKgJ,SAAS4M,KAAKC,+CA+CrBvC,EAAAzT,UAAA2U,KAAP,WACExU,KAAK6U,aACL7U,KAAKgJ,SAASwL,QAOTlB,EAAAzT,UAAAmW,eAAP,WACOhW,KAAKkU,WAAclU,KAAKwJ,eAI7BxJ,KAAK0V,kBAOApC,EAAAzT,UAAAoW,aAAP,WACEjW,KAAKgJ,SAASwL,QAMRlB,EAAAzT,UAAA+T,aAAR,WACE,IAAMsC,EAAYlW,KAAK2G,SAASuP,UAChC,OAAOA,EAAYA,EAAUtM,WAAW/F,OAAS,IAM3CyP,EAAAzT,UAAAiU,kBAAR,WACE,OAAO9T,KAAK2G,SAASgP,UAAUjH,sBAgBzB4E,EAAAzT,UAAA8U,eAAR,SAAuB5J,SACfoL,EACkB,iBAAfpL,EAAKtJ,MAAqBsJ,EAAKtJ,MAAQsJ,EAAKtJ,MAAMzB,KAAK2I,WAC1DlH,EACkB,iBAAfsJ,EAAKtJ,MAAqBsJ,EAAKtJ,MAAQsJ,EAAKtJ,MAAMzB,KAAK4I,YAEhE,OAAAvJ,EAAA,GACK0L,EAAKtJ,QAAKmE,EAAA,IACZ5F,KAAK2G,SAASgC,WAAYwN,EAAOvQ,EACjC5F,KAAK2G,SAASiC,YAAanH,EAAKmE,KAQ7B0N,EAAAzT,UAAAkU,iBAAR,SAAyBtS,GAAzB,IAAAuM,EAAAhO,KACE,IAAKyB,IAAUzB,KAAKoJ,oBAClB,MAAO,GAGT,IAAMgN,EAAepW,KAAK2G,SAASuB,WAEnC,OAAOlI,KAAKqW,kBAAkBjL,OAAO,SAACL,GACpC,IAAMuL,GAAWF,GAEbpI,EAAKrH,SAAS4P,KAAKC,KAAK,SAAArR,GACtB,IAAMyD,EAAaoF,EAAKrH,SAASiC,WAIjC,OAFuB,iBAAdzD,EAAIiM,MAAqBjM,EAAIiM,MAAQjM,EAAIiM,MAAMxI,MAEvCmC,EAAKiD,EAAKpF,cAGjC,OAAOoF,EAAKtE,WAAWjI,EAAOsJ,KAAsB,IAAbuL,KAOnChD,EAAAzT,UAAA4U,SAAR,SAAiBnK,GACftK,KAAKsK,MAAQA,EAAMmM,MAAM,EAAGzW,KAAKsJ,cAAgBgB,EAAM1K,SAcjD0T,EAAAzT,UAAAqV,cAAR,SAAsBzP,GAAtB,IAAAuI,EAAAhO,KAUE,OATAA,KAAKqW,kBAAoB5Q,EAAK2I,IAAI,SAAArD,SAChC,MAAuB,iBAATA,UAEPiD,EAAKrF,WAAYoC,EAClBnF,EAACoI,EAAKpF,YAAamC,KAErBA,IAGC/K,MAkCDsT,EAAAzT,UAAAiV,gBAAR,SAAwBlQ,GAGtB,OAFA5E,KAAK2G,SAAS+P,UAAY9R,EAEnB5E,MAjZkCsL,EAAAA,CAA1CgE,EAAAA,UAAUqH,EAAAA,YAAa,CAAEpH,UAAQ,oBAA0BoH,EAAAA,6CAM9BrL,EAAAA,CAA7BsL,EAAAA,gBAAgB5D,EAAAA,6BAA+B6D,EAAAA,4CAKvCvL,EAAAA,CAARC,EAAAA,8DAKQD,EAAAA,CAARC,EAAAA,yEAMQD,EAAAA,CAARC,EAAAA,2EAMQD,EAAAA,CAARC,EAAAA,gFAMQD,EAAAA,CAARC,EAAAA,yEAMQD,EAAAA,CAARC,EAAAA,oEAKQD,EAAAA,CAARC,EAAAA,iEAKQD,EAAAA,CAARC,EAAAA,kEAMQD,EAAAA,CAARC,EAAAA,oEAMQD,EAAAA,CAARC,EAAAA,oEAMQD,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,qEAKQD,EAAAA,CAARC,EAAAA,8DA8BQD,EAAAA,CAARC,EAAAA,qGAiJDD,EAAAA,CADC4H,EAAAA,aAAa,uIAad5H,EAAAA,CADC4H,EAAAA,aAAa,mIA5QHI,EAAgBrT,EAAA,CAJ5BuP,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,o5BAmIuCoH,EAAAA,YAjI5BxD,MCsBPyD,GAFazG,OAAe0G,UAEV,CACpBC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA5D,IAC9B6D,OAAO,IASX7D,EAAA,SAAA8D,GAwTI,SAAA9D,EAA6B3C,EACT0G,SADpBvJ,EAEIsJ,EAAAxX,KAAAE,OAAOA,YAFkBgO,EAAA6C,SAAAA,EACT7C,EAAAuJ,aAAAA,EApTJvJ,EAAApH,cAA0BF,EAASC,SAASC,cAM5CoH,EAAAnH,kBAA8BH,EAASC,SAASE,kBAMhDmH,EAAAhH,YAAsBN,EAASC,SAASK,YAMxCgH,EAAA/G,qBAA+BP,EAASC,SAASM,qBAMjD+G,EAAAlH,SAAmBJ,EAASC,SAASG,SAMrCkH,EAAA9G,WAA4BR,EAASC,SAASO,WAM9C8G,EAAA7G,gBAAsCT,EAASC,SAASQ,gBAMxD6G,EAAA5G,qBAAuBV,EAASC,SAASS,qBAKzC4G,EAAA3G,cAA2CX,EAASC,SAASU,cAK7D2G,EAAA1G,MAAgBZ,EAASC,SAASW,MAKlC0G,EAAAzG,qBAAuBb,EAASC,SAASY,qBAMzCyG,EAAAxG,QAAUd,EAASC,SAASa,QAK5BwG,EAAAvG,WAAqBf,EAASC,SAASc,WAMvCuG,EAAAtG,YAAuBhB,EAASC,SAASe,YAMzCsG,EAAArG,SAAoBjB,EAASC,SAASgB,SAKtCqG,EAAApG,UAAqBlB,EAASC,SAASiB,UAKvCoG,EAAAnG,WAAsBnB,EAASC,SAASkB,WAMxCmG,EAAAlG,kBAAoBpB,EAASC,SAASmB,kBAKtCkG,EAAAjG,YAAcrB,EAASC,SAASoB,YAKhCiG,EAAAhG,UAAYtB,EAASC,SAASqB,UAK9BgG,EAAA/F,SAAoBvB,EAASC,SAASsB,SAKtC+F,EAAA9F,WAAaxB,EAASC,SAASuB,WAM/B8F,EAAA7F,eAAiBzB,EAASC,SAASwB,eAKnC6F,EAAA5F,SAAW1B,EAASC,SAASyB,SAY7B4F,EAAA3F,OAAkB3B,EAASC,SAAS0B,OAMpC2F,EAAA1B,SAAmB5F,EAASC,SAAS2B,SAKrC0F,EAAAzF,QAAmB7B,EAASC,SAAS4B,QAKrCyF,EAAAxF,SAAmB9B,EAASC,SAAS6B,SAKrCwF,EAAAvF,WAAa/B,EAASC,SAAS8B,WAK/BuF,EAAAtF,SAAWhC,EAASC,SAAS+B,SAK7BsF,EAAAnF,kBAAoBnC,EAASC,SAASkC,kBAMrCmF,EAAAwJ,MAAQ,IAAIxL,EAAAA,aAMZgC,EAAAgD,SAAW,IAAIhF,EAAAA,aAMfgC,EAAA+C,SAAW,IAAI/E,EAAAA,aAMfgC,EAAA9B,QAAU,IAAIF,EAAAA,aAMdgC,EAAA/B,OAAS,IAAID,EAAAA,aAMbgC,EAAAuH,aAAe,IAAIvJ,EAAAA,aAMnBgC,EAAAyJ,QAAU,IAAIzL,EAAAA,aAMdgC,EAAA0J,kBAAoB,IAAI1L,EAAAA,aAMxBgC,EAAAiD,YAAc,IAAIjF,EAAAA,aA2B5BgC,EAAA0I,WAAY,EAqBX1I,EAAApC,YAAShG,EAAA,IACZ+R,GAAsC,GACvC/R,EAACgS,GAAoC,MAOxB5J,EAAA3B,gBAAwC,IAAIL,EAAAA,aAMtDgC,EAAA6J,eAAiB,GAgBjB7J,EAAA8J,OAAmB,GA2HnB9J,EAAA+J,UAAY,SAAC5S,EAAeJ,QAAA,IAAAA,IAAAA,EAAQiJ,EAAK1D,MAAM1K,QAClD,IAAM0K,EAAQ0D,EAAK1D,MACb8G,EAAQpD,EAAK7F,eAAiBhD,EAAI6I,EAAKpF,YAAczD,EAE3D6I,EAAK1D,MbzWN,WACH,IAAK,IAAI9G,EAAK,GAAI/D,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3C+D,EAAKA,EAAGwU,OAAO3U,EAAO1D,UAAUF,KACpC,OAAO+D,EasWOyU,CACH3N,EAAMmM,MAAM,EAAG1R,GAAM,CACxBqM,GACG9G,EAAMmM,MAAM1R,EAAOuF,EAAM1K,UAQ7BoO,EAAAkK,UAAY,SAAC9G,SACVvN,EAAO,SAACsU,EAAe/X,GACzB,MAAsB,iBAAR+X,EAAmBA,EAAItU,OAASsU,EAAI/X,IAGtD,OAAAf,EAAA,GACwB,iBAAV+R,EAAqBA,EAAQ,KAAExL,EAAA,IACxCoI,EAAKrF,WAAYqF,EAAK5F,SAAWvE,EAAKuN,EAAOpD,EAAKrF,WAAayI,EAAKxL,EACpEoI,EAAKpF,YAAaoF,EAAK5F,SAAWvE,EAAKuN,EAAOpD,EAAKpF,YAAcwI,EAAKxL,KA0QxEoI,EAAAoK,WAAa,SAACjT,EAAekT,QAAA,IAAAA,IAAAA,GAAA,GAChC,IAAMtC,EAAe/H,EAAKhF,SAAWgF,EAAKhF,SAAS+M,aAAe/Q,UAC5DvD,EAAQuM,EAAK9C,eAAe/F,GAAKtB,OAEvC,GAAIkS,IAAiBsC,IAAqB5W,EACtC,OAAO,EAGX,IAAM6W,EAAOtK,EAAKuK,SAASpT,EAAKkT,GAGhC,IAAKrK,EAAK9F,YAAcoQ,GAAQtK,EAAKjG,YAAa,CAC9C,IAAMqJ,EAAQpD,EAAKuI,KAAKiC,KAAK,SAAAzN,GACzB,OAAOiD,EAAKlD,aAAaC,EAAKqG,SAAWpD,EAAKlD,aAAawN,KAG3DlH,GACAA,EAAMU,QAId,IAAM2G,EAAqBJ,GAAoBrK,EAAK5G,qBAE9CsR,EAAa,EAEdJ,GAAQtK,EAAK9F,YAGb8F,EAAK2F,gBAGL,IAAyB3F,EAAK5G,sBAGnC,OAAOsR,EAAWtN,OAAOuN,SAAS/Y,SAAW8Y,EAAW9Y,QA0SpDoO,EAAA4K,gBAAkB,SAAOnT,GAAoB,OAAAzE,EAAAgN,OAAA,OAAA,EAAA,6DAc3CvB,EATU,WACZ,IAAMoM,EAAOF,QAASrI,OAAoBwI,eACpCA,EAAgBD,EACjBvI,OAAiC,cAClC7K,EAAKqT,cACHC,EAAOF,EAAO,OAAS,aAC7B,OAAyB,OAAlBC,EAAyB,GAAKA,EAAcpT,QAAQqT,IAAS,GAG3DC,GAEPC,EAAWxM,EACZyM,MAAMlZ,KAAK8H,mBACXsG,IAAI,SAAArD,GACD,IAAM5F,EAAM6I,EAAKkK,UAAUnN,GAE3B,OADAiD,EAAKmL,cAAchU,EAAI6I,EAAKrF,YACrBqF,EAAK1H,mBAAkB,EAAOnB,KAGvCiU,EAAa,WAAM,OAAAnH,WAAW,WAAM,OAAAjE,EAAKmL,cAAc,KAAK,KAElE9X,QAAQgY,IAAIJ,GAAUjX,KAAK,WACvBgM,EAAKyJ,QAAQ9K,KAAKF,GAClB2M,MAECxE,SAAMwE,cAYnB,Ob3mCO,SAAmBva,EAAGC,GAEzB,SAASwa,IAAOtZ,KAAKuZ,YAAc1a,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEgB,UAAkB,OAANf,EAAaC,OAAOya,OAAO1a,IAAMwa,EAAGzZ,UAAYf,EAAEe,UAAW,IAAIyZ,GakC5CG,CAAAA,EAAAA,GAyI1B1a,OAAA4B,eAAW6S,EAAA3T,UAAA,YAAS,KAApB,WACL,OAAOG,KAAK6X,oBA4HhB,SAAqBpL,GACjBzM,KAAK6X,eAAiBpL,EACtBzM,KAAKqM,gBAAgBM,KAAKF,oCAmC9B1N,OAAA4B,eAAW6S,EAAA3T,UAAA,eAAY,KAAvB,WACI,MAAyB,KAAlBG,KAAKsM,SAAkB,KAAO,oCAoBlCkH,EAAA3T,UAAAsV,gBAAP,WAAA,IAAAnH,EAAAhO,KAGIA,KAAK0Z,yBACL1Z,KAAK2Z,6BACL3Z,KAAK4Z,6BAED5Z,KAAKuV,aAAasE,UAAUja,QAC5BI,KAAK8Z,6BAIL9Z,KAAK0H,aAAe1H,KAAK4H,YACzB5H,KAAK+Z,wBAIL/Z,KAAK6H,YACL7H,KAAKga,uBAGT,IAAMC,EAAiBja,KAAK2V,UAAU5I,KAAKmN,cAE3CD,EAAelF,KACX3J,EAAAA,OAAO,SAAC+O,GAAmB,MAAW,YAAXA,KAC7BlF,UAAU,WACRjH,EAAK8J,OAAS9J,EAAK2H,UAAU7H,iBAAiBE,EAAK3G,iBAGvDrH,KAAKoa,sBAAwBH,EAAelF,KACxC3G,EAAAA,IAAI,SAAC+L,GACD,MAAkB,YAAXA,GAAwBnM,EAAK0I,aAKxC1W,KAAK2H,UACL3H,KAAK2V,UAAU/G,WAOhB4E,EAAA3T,UAAA+M,SAAP,WAI+B5M,KAAK8G,WAAa9B,WACzChF,KAAKsK,OACLtK,KAAKsK,MAAM1K,OAASI,KAAK8G,WAGzB9G,KAAK8G,SAAW9G,KAAKsK,MAAM1K,OAC3Bya,QAAQC,KXzaa,2EW8azBta,KAAKiI,UAAWjI,KAAKoH,sBAA+BpH,KAAKiI,SAEzDjI,KAAKua,wBAQF/G,EAAA3T,UAAAwG,kBAAP,SAAyBlB,EAAeJ,GAAxC,IAAAiJ,EAAAhO,KACI,OAAO,IAAIqB,QAAQ,SAAAC,GACf,IAAMkZ,EAAc,SAACpJ,GACjBpD,EAAKyM,WAAWrJ,EAAOrM,GACvBzD,EAAQ6D,IAGZ6I,EAAKvF,WACDuF,EAAKvF,WAAWtD,GACX4P,KAAKC,EAAAA,SACLC,UAAUuF,GAAeA,EAAYrV,MAW/CqO,EAAA3T,UAAAyG,kBAAP,SAAyB+R,EAA2BlT,EAChDJ,EAAgB2V,GADpB,IAAA1M,EAAAhO,KAEI,OAAO,IAAIqB,QAAQ,SAACC,EAASC,GACzB,IAAMiZ,EAAc,SAACpJ,GACjB,OAAOpD,EACF2M,QAAQtC,EAAkBjH,EAAOrM,EAAO2V,GACxC1Y,KAAKV,GACLsT,SAAMrT,IAGf,OAAOyM,EAAKtF,SACRsF,EAAKtF,SAASvD,GACT4P,KAAKC,EAAAA,SACLC,UAAUuF,EAAajZ,GAAUiZ,EAAYrV,MAyCvDqO,EAAA3T,UAAA+a,WAAP,SAAkB7P,EAA4B4B,QAAA,IAAAA,IAAAA,GAAA,GACvB5B,GAAwB,iBAATA,GAAqBA,EAAKsG,UAE1CrR,KAAK6a,cAAgB9P,IAIvC/K,KAAK6a,YAAc9P,EAEf4B,GACA3M,KAAK+Q,SAASpE,KAAK5B,KAUpByI,EAAA3T,UAAAib,WAAP,SAAkBC,EAAmB/L,GAArC,IAAAhB,EAAAhO,KACIA,KAAK4L,UAAUmP,GAAWC,QAAQ,SAAAC,GAAY,OAAAA,EAASnb,KAAKkO,EAAMgB,MAQ/DwE,EAAA3T,UAAAqb,cAAP,SAAqBzV,GACjB,IAAMP,EAAQO,EAAKP,MACb9E,EAAM8E,EAAM0M,SAAW1M,EAAMiW,MAC7BC,EAAWlW,EAAMkW,WAAY,EAEnC,OAAQC,EAA4Bjb,IAChC,KAAKkb,EACD,GAAItb,KAAK6a,aAAe7a,KAAKgI,UAAW,CACpC,IAAMjD,EAAQ/E,KAAKsK,MAAMR,QAAQ9J,KAAK6a,aACtC7a,KAAKqG,kBAAkBrG,KAAK6a,YAAa9V,GAE7C,MAEJ,KAAKuW,EACDtb,KAAKub,UAAU9V,EAAK2L,MX5hBhB,QW6hBJ,MAEJ,KAAKkK,EACDtb,KAAKub,UAAU9V,EAAK2L,MXjiBhB,QWkiBJ,MAEJ,KAAKkK,EACD,GAAIF,EAAU,CACV,GAAIpb,KAAKwb,WAAW/V,EAAK2L,OACrB,OAGJpR,KAAKub,UAAU9V,EAAK2L,MXziBpB,YW0iBG,CACH,GAAIpR,KAAKyb,UAAUhW,EAAK2L,SAAWpR,KAAKuI,SAAWvI,KAAK2T,iBACpD,OAGJ3T,KAAKub,UAAU9V,EAAK2L,MXhjBpB,QWkjBJ,MAEJ,QACI,OAIRlM,EAAMkK,kBAGGoE,EAAA3T,UAAA6b,aAAb,mGAEQ,6BAAA,CAAA,EAAM1b,KAAKsG,mBAAkB,EAAOtG,KAAKkW,0BAAzCyF,EAAAnZ,oBAEA,gBAAA,CAAA,0BAQDgR,EAAA3T,UAAAsZ,cAAP,SAAqB1X,EAAema,QAAA,IAAAA,IAAAA,GAAA,GAChB5b,KAAK6b,aAGbnP,SAASjL,EAAO,CAAEma,UAASA,KAM/BpI,EAAA3T,UAAAgc,WAAR,WACI,OAAO7b,KAAK2V,UAAUlU,OAQnB+R,EAAA3T,UAAA2O,MAAP,SAAasN,EAAoBC,QAApB,IAAAD,IAAAA,GAAA,GACL9b,KAAKuX,aAAa/Q,SAAS,cAI/BxG,KAAK4a,WAAW5V,WAAW,GAEvB8W,IACA9b,KAAK2V,UAAUnH,QACfxO,KAAKkM,QAAQS,KAAK3M,KAAKkW,cAOxB1C,EAAA3T,UAAA4O,KAAP,WACIzO,KAAKwK,YAELxK,KAAKiM,OAAOU,KAAK3M,KAAKkW,YAMnB1C,EAAA3T,UAAAwO,UAAP,WACI,QAASrO,KAAK2V,WAAa3V,KAAK2V,UAAUtH,aAMvCmF,EAAA3T,UAAA2N,eAAP,WACI,QAASxN,KAAK2V,WAAa3V,KAAK2V,UAAUnI,kBAQvCgG,EAAA3T,UAAAmc,kBAAP,WACI,IAAMtM,EAAW1P,KAAKic,UAAYjc,KAAKic,UAAUjH,MAAQhQ,UACnDkX,EAAelc,KAAKgJ,UAAYhJ,KAAKgJ,SAASiT,UAChDjc,KAAKgJ,SAASiT,UAAUjH,MAAQhQ,UAEpC,OAAO2T,QAAQjJ,GAAYA,IAAawM,IAM5Cnd,OAAA4B,eAAW6S,EAAA3T,UAAA,kBAAe,KAA1B,WACI,OAAOG,KAAK8G,WAAa9B,WACrBhF,KAAKsK,MAAM1K,QAAUI,KAAK8G,0CAMlC/H,OAAA4B,eAAW6S,EAAA3T,UAAA,YAAS,KAApB,WACI,IAAMkN,EAAO/M,KAAK2V,UAAUlU,MAE5B,OAAOsL,EAAOA,EAAKtL,MAAQ,oCAQxB+R,EAAA3T,UAAAsc,cAAP,SAAqBjX,EAAkBC,EAAeJ,GAClDG,EAAMqM,kBAEN,IAAMxG,EAAO,CAAEqR,KAAMpc,KAAKwI,SAAUrD,IAAGA,EAAEJ,MAAKA,GAE9C/E,KAAKuX,aAAa1R,UAAU7F,MAC5BA,KAAKuX,aAAatS,eAAeC,EAAO6F,GACxC/K,KAAKuX,aAAahR,SAAS,CAAE1B,UAAU,EAAME,MAAKA,KAO/CyO,EAAA3T,UAAAwc,WAAP,SAAkBnX,EAAkBH,GAChC/E,KAAKuX,aAAahR,SAAS,CAAEzB,UAAU,IACvC9E,KAAKuX,aAAaxR,YAAY/F,MAE9BkF,EAAMkK,kBAQHoE,EAAA3T,UAAAoG,aAAP,SAAoBf,EAAkBH,GAClC,IAAMgG,EAAO/K,KAAKuX,aAAa/R,eAAeN,GAEzC6F,GAAQA,EAAKqR,OAASpc,KAAKwI,WAIhCxI,KAAKuX,aAAatR,aAAa8E,EAAK5F,IAAK4F,EAAKhG,MAAOA,GAErDG,EAAMkK,iBACNlK,EAAMqM,oBAMHiC,EAAA3T,UAAAyc,WAAP,WACI,IAAMC,EAAavc,KAAKuX,aAAavR,WAAahG,KAC5Csc,EAAatc,KAAKuX,aAAa/Q,SAAS,YAE9C,OAAOmS,QAAQ4D,GAAcD,IAQ1B9I,EAAA3T,UAAA2c,aAAP,SAAoBC,EAA0B1X,GAC1C/E,KAAKsK,MAAMvF,GAAS0X,EACpBzc,KAAKyO,QAOF+E,EAAA3T,UAAA6c,QAAP,SAAe3X,EAAegG,GAC1B,OAAOA,EAAK/K,KAAK4I,aAOd4K,EAAA3T,UAAA8c,gBAAP,SAAuB/W,OAAET,EAAAS,EAAAT,IAAKS,EAAAb,MAC1B/E,KAAKiR,YAAYtE,KAAKxH,IAkDlBqO,EAAA3T,UAAA0b,UAAR,SAAkBxQ,EAAgB6R,GAC9B,IAAMC,EAAS7c,KAAKyb,UAAU1Q,GACxB+R,EAAU9c,KAAKwb,WAAWzQ,GAIhC,KXlyBY,SW+xBQ6R,GAAgCC,GX9xBxC,SW+xBPD,GAAgCE,GAErC,CAKA,IAAM5T,EXvyBM,SWuyBG0T,EAA+B,GAAK,EAC7C7X,EAAQ/E,KAAK+c,YAAYhS,GAAQ7B,EACjC/D,EAAMnF,KAAKgd,cAAcjY,GAE/B,OAAOI,EAAImM,OAAOxR,KAAKqF,GARnBnF,KAAKwO,OAAM,IAeXgF,EAAA3T,UAAA2b,WAAR,SAAmBzQ,GACf,OAAO/K,KAAKuW,KAAKvB,MAAM5D,QAAUrG,GAO7ByI,EAAA3T,UAAA4b,UAAR,SAAkB1Q,GACd,OAAO/K,KAAKuW,KAAK0G,KAAK7L,QAAUrG,GAO5ByI,EAAA3T,UAAAkd,YAAR,SAAoBhS,GAGhB,OAFa/K,KAAKuW,KAAK2G,UAEXC,UAAU,SAAAhY,GAAO,OAAAA,EAAIiM,QAAUrG,KAOvCyI,EAAA3T,UAAAmd,cAAR,SAAsBjY,GAGlB,OAFa/E,KAAKuW,KAAK2G,UAEXnY,IASTyO,EAAA3T,UAAA4a,WAAP,SAAkBtV,EAAeJ,GAC7B/E,KAAKsK,MAAQtK,KAAKmL,gBAAgBpG,GAG9B/E,KAAK6a,cAAgB1V,GACrBnF,KAAK4a,WAAW5V,WAAW,GAI/BhF,KAAKwO,OAAM,GAAM,GAGjBxO,KAAKgR,SAASrE,KAAKxH,IAWfqO,EAAA3T,UAAA8a,QAAR,SAAgBtC,EAA0BtN,EAAgBhG,EAAgB2V,GAA1E,IAAA1M,EAAAhO,UAAgB,IAAAqY,IAAAA,GAAA,GAEZ,IAAMlC,EAAUnW,KAAKkL,eAAeH,GAC9B5F,EAAMnF,KAAKkY,UAAUnN,GAM3B,OAJIsN,GACArY,KAAKmZ,cAAcnZ,KAAK8K,aAAaC,GAAM,IAGxC,IAAI1J,QAAQ,SAACC,EAASC,GAIzB,IAAM6b,EAAQ,WAEVpP,EAAKmL,cAAc,IAEfuB,EACA1M,EAAKQ,OAAM,GAAO,GAGlBR,EAAKQ,OAAM,GAAM,GAGrBlN,EAAQ6U,IAGNkH,EAAa,WACfrP,EAAK+J,UAAU5S,EAAKJ,GAGpBiJ,EAAKwJ,MAAM7K,KAAKxH,GAEX6I,EAAKhF,WAIVgF,EAAKhF,SAASwL,OAEVxG,EAAKhF,SAASI,qBACd4E,EAAKhF,SAAS0K,SAIhByG,EAASnM,EAAK2H,UAAU5I,KAAKoN,OAC7B/B,EAAapK,EAAKoK,WAAWjT,EAAKkT,GAElCX,EAAoB,WAEtB,OADA1J,EAAK0J,kBAAkB/K,KAAKxH,GACrB5D,KAGX,MAAe,UAAX4Y,GAAsB/B,GACtBiF,IACOD,KAGI,YAAXjD,GAAyB/B,EAKd,YAAX+B,EACsBnM,EAAK2H,UAAU5I,KAAKmN,cAGrCnF,KACG3J,EAAAA,OAAO,SAAAkS,GAAgB,MAAiB,YAAjBA,IACvBtI,EAAAA,SAEHC,UAAU,SAACqI,GACR,MAAqB,UAAjBA,GAA4BlF,GAC5BiF,IACOD,MAEPA,IACO1F,YAdvB,GAJI0F,IACO1F,QA2BXlE,EAAA3T,UAAA8Z,2BAAR,WAAA,IAAA3L,EAAAhO,KACUud,EAAmBvd,KAAK6G,kBAAkBjH,OAAS,GAAKI,KAAK4G,cAAchH,OAAS,EAc1F4L,EAAO1L,KAAKE,KAAM2X,EAbD,SAAC3I,GACd,IAAMwO,EAAaxP,EAAKnH,kBAAkBiD,QAAQkF,EAAO4C,UAAY,EAC/D6L,EAASzP,EAAKpH,cAAckD,QAAQkF,EAAO5O,MAAQ,EAEnDsd,EAAqC,MAAnB1O,EAAO4C,SAE3B4L,GAAeC,IAAWC,KAC1B1O,EAAOI,iBACPpB,EAAK1H,mBAAkB,EAAO0H,EAAKkI,WAC9BtB,SAAM,gBAI4B2I,IAM3C/J,EAAA3T,UAAA6Z,uBAAR,WAAA,IAAA1L,EAAAhO,KAYIwL,EAAO1L,KAAKE,KAAM2X,EAXD,SAAC3I,IAC0B,KAAnBA,EAAO4C,SAAqC,IAAnB5C,EAAO4C,WAGhD5D,EAAKkI,WACNlI,EAAK1D,MAAM1K,QACXoO,EAAKuI,KAAK0G,KAAK3L,OAAOxR,KAAKkO,EAAKuI,KAAK0G,SAWzCzJ,EAAA3T,UAAA+Z,2BAAR,WAAA,IAAA5L,EAAAhO,KACIA,KAAK2V,UAAUvJ,UAAU6I,UAAU,SAAA/P,GACb,cAAdA,EAAM9E,KAAiD,KAA1B4N,EAAKkI,UAAUrS,QAC5CqB,EAAMkK,oBAQVoE,EAAA3T,UAAAma,qBAAR,WAAA,IAAAhM,EAAAhO,KACU4N,EAAQ5N,KAAK2V,UAAU/H,MAAMC,cAGnC7N,KAAK6Q,SAASrF,OAAOoC,EAAO,QAAS,SAAC1I,GAIlC,OAHA8I,EAAK4K,gBAAgB1T,GAErBA,EAAMkK,kBACC,KAOPoE,EAAA3T,UAAAia,0BAAR,WAAA,IAAA9L,EAAAhO,KACIA,KAAK2V,UAAU5I,KACV4Q,aACA5I,KACGU,EAAAA,aAAazV,KAAKuH,uBAErB0N,UAAU,SAACxT,GACRuM,EAAKuH,aAAa5I,KAAKlL,EAAMsJ,SAOjCyI,EAAA3T,UAAAka,sBAAR,WAAA,IAAA/L,EAAAhO,KAMIA,KAAK2V,UACA1J,OACA8I,KACGU,EAAAA,aAAa,KACbrK,EAAAA,OATS,WAEb,QADkB4C,EAAKhF,UAAYgF,EAAKhF,SAASkL,YAC1BlG,EAAKkI,cAS3BjB,UAAU,WACP,IAAMmI,EAAQ,WAAM,OAAApP,EAAKmL,cAAc,KAEvC,GAAInL,EAAKpG,UACL,OAAOoG,EACF1H,mBAAkB,EAAO0H,EAAKkI,UAAWlR,WAAW,GACpDhD,KAAKob,GACLxI,SAAMwI,GAGfA,OASJ5J,EAAA3T,UAAA0Y,SAAR,SAAiBpT,EAAesT,GAAhC,IAAAzK,EAAAhO,KAEU4d,EAAKzY,EADQsT,EAAqBzY,KAAKgJ,SAASJ,WAAa5I,KAAK4I,YAGxE,OAAO5I,KAAKsK,MAAMkO,KAAK,SAAAzN,GAAQ,OAAAiD,EAAKlD,aAAaC,KAAU6S,KA2CvDpK,EAAA3T,UAAA0a,qBAAR,WACIva,KAAK6d,kBAAoB,CACrBpc,MAAO,KACPqc,OAAMze,EAAA,GAAOW,KAAK6I,qBA9jCjByC,EAAAA,CAARC,EAAAA,oEAMQD,EAAAA,CAARC,EAAAA,wEAMQD,EAAAA,CAARC,EAAAA,mEAMQD,EAAAA,CAARC,EAAAA,4EAMQD,EAAAA,CAARC,EAAAA,gEAMQD,EAAAA,CAARC,EAAAA,iEAMQD,EAAAA,CAARC,EAAAA,sEAMQD,EAAAA,CAARC,EAAAA,4EAKQD,EAAAA,CAARC,EAAAA,qEAKQD,EAAAA,CAARC,EAAAA,6DAKQD,EAAAA,CAARC,EAAAA,4EAMQD,EAAAA,CAARC,EAAAA,+DAKQD,EAAAA,CAARC,EAAAA,kEAMQD,EAAAA,CAARC,EAAAA,oEAMQD,EAAAA,CAARC,EAAAA,iEAKQD,EAAAA,CAARC,EAAAA,kEAKQD,EAAAA,CAARC,EAAAA,mEAMQD,EAAAA,CAARC,EAAAA,yEAKQD,EAAAA,CAARC,EAAAA,mEAKQD,EAAAA,CAARC,EAAAA,iEAKQD,EAAAA,CAARC,EAAAA,iEAKQD,EAAAA,CAARC,EAAAA,kEAMQD,EAAAA,CAARC,EAAAA,sEAKQD,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,+FAOQD,EAAAA,CAARC,EAAAA,+DAMQD,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,kEAKQD,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,yEAMSD,EAAAA,CAAT+D,EAAAA,8DAMS/D,EAAAA,CAAT+D,EAAAA,iEAMS/D,EAAAA,CAAT+D,EAAAA,iEAMS/D,EAAAA,CAAT+D,EAAAA,gEAMS/D,EAAAA,CAAT+D,EAAAA,+DAMS/D,EAAAA,CAAT+D,EAAAA,qEAMS/D,EAAAA,CAAT+D,EAAAA,gEAMS/D,EAAAA,CAAT+D,EAAAA,0EAMS/D,EAAAA,CAAT+D,EAAAA,oEAMkD/D,EAAAA,CAAlDyS,EAAAA,aAAazK,EAAkB,CAAE/D,UAAQ,oBAA0B+D,mCAKdhI,EAAAA,CAArDsL,EAAAA,gBAAgB5D,EAAAA,YAAa,CAAEgL,aAAa,oBAA2BnH,EAAAA,4CAK5BvL,EAAAA,CAA3CgE,EAAAA,UAAUxD,EAAc,CAAEyD,UAAQ,oBAA2BzD,oCA0BlCR,EAAAA,CAA3B2S,EAAAA,aAAatN,mBAA2BkG,EAAAA,uCAe/BvL,EAAAA,CAAT+D,EAAAA,yBAAiCrD,EAAAA,qDAalCV,EAAAA,CADC2H,EAAAA,YAAY,qGA1SJO,EAAiBvT,EAAA,CAP7BuP,EAAAA,UAAU,CACPC,SAAU,YACVyO,UAAW,CAACnH,GAEZrH,SAAA,4+FACAE,WAAUA,ksPA0T6BwD,EAAAA,UACLzO,KAzTzB6O,GAAb,CAAuCpJ,gBCrDvC,SAAA+T,KAAkC,OAArBA,EAAmBle,EAAA,CAL/BuP,EAAAA,UAAU,CACPC,SAAU,cACVC,SAAA,+xKAGSyO,MCOPC,EAAkB,IAAIrU,EAgC5BsU,EAAA,WAAA,SAAAA,KAQA,OAHkBA,EAAAC,aAAd,SAA2BrU,GACvBmU,EAAgBpU,WAAWC,IANtBoU,EAAcpe,EAAA,CA9B1Bse,EAAAA,SAAS,CACNC,QAAS,CACLC,EAAAA,aACAC,EAAAA,oBACAC,EAAAA,YACAC,EAAAA,mBAEJC,aAAc,CACVrL,EACA2K,EACArS,EACA6E,EACAjN,EACA4P,EACA3D,GAEJmP,QAAS,CACLtL,EACA2K,EACArS,EACA6E,EACAjN,EACA4P,EACA3D,GAEJuO,UAAW,CACPvZ,EACA,CAAEsS,QAAS8H,EAAAA,wBAAyBC,UAAU,OAGzCX,GAAb","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\n\nconst escape = s => s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n@Pipe({\n    name: 'highlight'\n})\nexport class HighlightPipe implements PipeTransform {\n    /**\n     * @name transform\n     * @param value {string}\n     * @param arg {string}\n     */\n    public transform(value: string, arg: string): string {\n        if (!arg.trim()) {\n            return value;\n        }\n\n        try {\n            const regex = new RegExp(`(${escape(arg)})`, 'i');\n            return value.replace(regex, '<b>$1</b>');\n        } catch (e) {\n            return value;\n        }\n    }\n}\n","/*\n** constants and default values for <tag-input>\n */\n\nexport const PLACEHOLDER = '+ Tag';\nexport const SECONDARY_PLACEHOLDER = 'Enter a new tag';\nexport const KEYDOWN = 'keydown';\nexport const KEYUP = 'keyup';\nexport const FOCUS = 'focus';\nexport const MAX_ITEMS_WARNING = 'The number of items specified was greater than the property max-items.';\n\nexport const ACTIONS_KEYS = {\n    DELETE: 'DELETE',\n    SWITCH_PREV: 'SWITCH_PREV',\n    SWITCH_NEXT: 'SWITCH_NEXT',\n    TAB: 'TAB'\n};\n\nexport const KEY_PRESS_ACTIONS = {\n    8: ACTIONS_KEYS.DELETE,\n    37: ACTIONS_KEYS.SWITCH_PREV,\n    39: ACTIONS_KEYS.SWITCH_NEXT,\n    9: ACTIONS_KEYS.TAB\n};\n\nexport const DRAG_AND_DROP_KEY = 'Text';\nexport const NEXT = 'NEXT';\nexport const PREV = 'PREV';\n\n","import { TagInputComponent } from '../../components/tag-input/tag-input';\nimport { TagModel } from '../accessor';\n\nimport { Injectable } from '@angular/core';\n\nexport declare interface DraggedTag {\n    index: number;\n    tag: TagModel;\n    zone: string;\n}\n\nimport { DRAG_AND_DROP_KEY } from '../../core/constants';\n\nexport declare interface State {\n    dragging: boolean;\n    dropping: boolean;\n    index: number | undefined;\n}\n\nexport declare type StateProperty = keyof State;\n\n@Injectable()\nexport class DragProvider {\n    public sender: TagInputComponent;\n    public receiver: TagInputComponent;\n\n    public state: State = {\n        dragging: false,\n        dropping: false,\n        index: undefined\n    };\n\n    /**\n     * @name setDraggedItem\n     * @param event\n     * @param tag\n     */\n    public setDraggedItem(event: DragEvent, tag: DraggedTag): void {\n        if (event && event.dataTransfer) {\n            event.dataTransfer.setData(DRAG_AND_DROP_KEY, JSON.stringify(tag));\n        }\n    }\n\n    /**\n     * @name getDraggedItem\n     * @param event\n     */\n    public getDraggedItem(event: DragEvent): DraggedTag | undefined {\n        if (event && event.dataTransfer) {\n            const data = event.dataTransfer.getData(DRAG_AND_DROP_KEY);\n            try {\n                return JSON.parse(data) as DraggedTag;\n            } catch {\n                return;\n            }\n        }\n    }\n\n    /**\n     * @name setSender\n     * @param sender\n     */\n    public setSender(sender: TagInputComponent): void {\n        this.sender = sender;\n    }\n\n    /**\n     * @name setReceiver\n     * @param receiver\n     */\n    public setReceiver(receiver: TagInputComponent): void {\n        this.receiver = receiver;\n    }\n\n    /**\n     * @name onTagDropped\n     * @param tag\n     * @param indexDragged\n     * @param indexDropped\n     */\n    public onTagDropped(tag: TagModel, indexDragged: number, indexDropped?: number): void {\n        this.onDragEnd();\n\n        this.sender.onRemoveRequested(tag, indexDragged);\n        this.receiver.onAddingRequested(false, tag, indexDropped);\n    }\n\n    /**\n     * @name setState\n     * @param state\n     */\n    public setState(state: { [K in StateProperty]?: State[K] }): void {\n        this.state = { ...this.state, ...state };\n    }\n\n    /**\n     * @name getState\n     * @param key\n     */\n    public getState(key?: StateProperty): State | State[StateProperty] {\n        return key ? this.state[key] : this.state;\n    }\n\n    /**\n     * @name onDragEnd\n     */\n    public onDragEnd(): void {\n        this.setState({\n            dragging: false,\n            dropping: false,\n            index: undefined\n        });\n    }\n}\n","import { Observable } from 'rxjs';\nimport { ValidatorFn, AsyncValidatorFn } from '@angular/forms';\n\nimport { SECONDARY_PLACEHOLDER, PLACEHOLDER } from './core/constants/index';\nimport { TagInputDropdown } from './components/dropdown/tag-input-dropdown.component';\nimport { TagModel } from './core/accessor';\n\nexport interface TagInputOptions {\n    separatorKeys: string[];\n    separatorKeyCodes: number[];\n    maxItems: number;\n    placeholder: string;\n    secondaryPlaceholder: string;\n    validators: ValidatorFn[];\n    asyncValidators: AsyncValidatorFn[];\n    onlyFromAutocomplete: boolean;\n    errorMessages: { [key: string]: string; };\n    theme: '';\n    onTextChangeDebounce: number;\n    inputId: string | null;\n    inputClass: string;\n    clearOnBlur: boolean;\n    hideForm: boolean;\n    addOnBlur: boolean;\n    addOnPaste: boolean;\n    pasteSplitPattern: string | RegExp;\n    blinkIfDupe: boolean;\n    removable: boolean;\n    editable: boolean;\n    allowDupes: boolean;\n    modelAsStrings: boolean;\n    trimTags: boolean;\n    ripple: boolean;\n    tabIndex: string;\n    disable: boolean;\n    dragZone: string;\n    onRemoving?: (tag: TagModel) => Observable<TagModel>;\n    onAdding?: (tag: TagModel) => Observable<TagModel>;\n    displayBy: string;\n    identifyBy: string;\n    animationDuration: {\n        enter: string,\n        leave: string\n    };\n}\n\nexport interface TagInputDropdownOptions {\n    displayBy: string;\n    identifyBy: string;\n    appendToBody: boolean;\n    offset: string;\n    focusFirstElement: boolean;\n    showDropdownIfEmpty: boolean;\n    minimumTextLength: number;\n    limitItemsTo: number;\n    keepOpen: boolean;\n    zIndex: number;\n    dynamicUpdate: boolean;\n    matchingFn: (value: string, target: TagModel) => boolean;\n}\n\nexport const defaults = {\n    tagInput: <TagInputOptions>{\n        separatorKeys: [],\n        separatorKeyCodes: [],\n        maxItems: Infinity,\n        placeholder: PLACEHOLDER,\n        secondaryPlaceholder: SECONDARY_PLACEHOLDER,\n        validators: [],\n        asyncValidators: [],\n        onlyFromAutocomplete: false,\n        errorMessages: {},\n        theme: '',\n        onTextChangeDebounce: 250,\n        inputId: null,\n        inputClass: '',\n        clearOnBlur: false,\n        hideForm: false,\n        addOnBlur: false,\n        addOnPaste: false,\n        pasteSplitPattern: ',',\n        blinkIfDupe: true,\n        removable: true,\n        editable: false,\n        allowDupes: false,\n        modelAsStrings: false,\n        trimTags: true,\n        ripple: true,\n        tabIndex: '',\n        disable: false,\n        dragZone: '',\n        onRemoving: undefined,\n        onAdding: undefined,\n        displayBy: 'display',\n        identifyBy: 'value',\n        animationDuration: {\n            enter: '250ms',\n            leave: '150ms'\n        }\n    },\n    dropdown: <TagInputDropdownOptions>{\n        displayBy: 'display',\n        identifyBy: 'value',\n        appendToBody: true,\n        offset: '50 0',\n        focusFirstElement: false,\n        showDropdownIfEmpty: false,\n        minimumTextLength: 1,\n        limitItemsTo: Infinity,\n        keepOpen: true,\n        dynamicUpdate: true,\n        zIndex: 1000,\n        matchingFn\n    }\n};\n\n/**\n * @name matchingFn\n * @param this\n * @param value\n * @param target\n */\nfunction matchingFn(this: TagInputDropdown, value: string, target: TagModel): boolean {\n    const targetValue = target[this.displayBy].toString();\n\n    return targetValue && targetValue\n        .toLowerCase()\n        .indexOf(value.toLowerCase()) >= 0;\n}\n","import { defaults, TagInputOptions, TagInputDropdownOptions } from '../../defaults';\n\nexport type Options = {\n    tagInput?: {\n        [P in keyof TagInputOptions]?: TagInputOptions[P];\n    };\n    dropdown?: {\n        [P in keyof TagInputDropdownOptions]?: TagInputDropdownOptions[P];\n    }\n};\n\nexport class OptionsProvider {\n    public static defaults = defaults;\n\n    public setOptions(options: Options): void {\n        OptionsProvider.defaults.tagInput = {...defaults.tagInput, ...options.tagInput};\n        OptionsProvider.defaults.dropdown = {...defaults.dropdown, ...options.dropdown};\n    }\n}\n\nexport { TagInputDropdownOptions, TagInputOptions };\n","import { ControlValueAccessor } from '@angular/forms';\nimport { Input } from '@angular/core';\nimport { OptionsProvider } from './providers/options-provider';\nimport { TagInputDropdown } from '../components/dropdown/tag-input-dropdown.component';\n\nexport class TagModelClass {\n    [key: string]: any;\n}\n\nexport type TagModel = string | TagModelClass;\n\nexport function isObject(obj: any): boolean {\n    return obj === Object(obj);\n}\n\nexport class TagInputAccessor implements ControlValueAccessor {\n    private _items: TagModel[] = [];\n    private _onTouchedCallback: () => void;\n    private _onChangeCallback: (items: TagModel[]) => void;\n\n    public dropdown: TagInputDropdown;\n\n    /**\n     * @name displayBy\n     */\n    @Input() public displayBy: string = OptionsProvider.defaults.tagInput.displayBy;\n\n    /**\n     * @name identifyBy\n     */\n    @Input() public identifyBy: string = OptionsProvider.defaults.tagInput.identifyBy;\n\n    public get items(): TagModel[] {\n        return this._items;\n    }\n\n    public set items(items: TagModel[]) {\n        this._items = items;\n        this._onChangeCallback(this._items);\n    }\n\n    public onTouched() {\n        this._onTouchedCallback();\n    }\n\n    public writeValue(items: any[]) {\n        this._items = items || [];\n    }\n\n    public registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    public registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @name getItemValue\n     * @param item\n     * @param fromDropdown\n     */\n    public getItemValue(item: TagModel, fromDropdown = false): string {\n        const property = fromDropdown && this.dropdown ? this.dropdown.identifyBy : this.identifyBy;\n        return isObject(item) ? item[property] : item;\n    }\n\n    /**\n     * @name getItemDisplay\n     * @param item\n     * @param fromDropdown\n     */\n    public getItemDisplay(item: TagModel, fromDropdown = false): string {\n        const property = fromDropdown && this.dropdown ? this.dropdown.displayBy : this.displayBy;\n        return isObject(item) ? item[property] : item;\n    }\n\n    /**\n     * @name getItemsWithout\n     * @param index\n     */\n    protected getItemsWithout(index: number): TagModel[] {\n        return this.items.filter((item, position) => position !== index);\n    }\n}\n","\n/**\n * @name listen\n * @param listenerType\n * @param action\n * @param condition\n */\nexport function listen(listenerType: string, action: () => any, condition = true): void {\n    // if the event provided does not exist, throw an error\n    if (!this.listeners.hasOwnProperty(listenerType)) {\n        throw new Error('The event entered may be wrong');\n    }\n\n    // if a condition is present and is false, exit early\n    if (!condition) {\n        return;\n    }\n\n    // fire listener\n    this.listeners[listenerType].push(action);\n}\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { AsyncValidatorFn, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\n\n@Component({\n    selector: 'tag-input-form',\n    styleUrls: ['./tag-input-form.style.scss'],\n    templateUrl: './tag-input-form.template.html'\n})\nexport class TagInputForm implements OnInit, OnChanges {\n    /**\n     * @name onSubmit\n     */\n    @Output() public onSubmit: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onBlur\n     */\n    @Output() public onBlur: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onFocus\n     */\n    @Output() public onFocus: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onKeyup\n     */\n    @Output() public onKeyup: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onKeydown\n     */\n    @Output() public onKeydown: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name inputTextChange\n     */\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\n\n    // inputs\n\n    /**\n     * @name placeholder\n     */\n    @Input() public placeholder: string;\n\n    /**\n     * @name validators\n     */\n    @Input() public validators: ValidatorFn[] = [];\n\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public asyncValidators: AsyncValidatorFn[] = [];\n\n    /**\n     * @name inputId\n     */\n    @Input() public inputId: string;\n\n    /**\n     * @name inputClass\n     */\n    @Input() public inputClass: string;\n\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     */\n    @Input() public tabindex = '';\n\n    /**\n     * @name disabled\n     */\n    @Input() public disabled = false;\n\n    /**\n     * @name input\n     */\n    @ViewChild('input', { static: false }) public input;\n\n    /**\n     * @name form\n     */\n    public form: FormGroup;\n\n    /**\n     * @name inputText\n     */\n    @Input()\n    public get inputText(): string {\n        return this.item.value;\n    }\n\n    /**\n     * @name inputText\n     * @param text {string}\n     */\n    public set inputText(text: string) {\n        this.item.setValue(text);\n\n        this.inputTextChange.emit(text);\n    }\n\n    private readonly item: FormControl = new FormControl({ value: '', disabled: this.disabled });\n\n    ngOnInit() {\n        this.item.setValidators(this.validators);\n        this.item.setAsyncValidators(this.asyncValidators);\n\n        // creating form\n        this.form = new FormGroup({\n            item: this.item\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.disabled && !changes.disabled.firstChange) {\n            if (changes.disabled.currentValue) {\n                this.form.controls['item'].disable();\n            } else {\n                this.form.controls['item'].enable();\n            }\n        }\n    }\n\n    /**\n     * @name value\n     */\n    public get value(): FormControl {\n        return this.form.get('item') as FormControl;\n    }\n\n    /**\n     * @name isInputFocused\n     */\n    public isInputFocused(): boolean {\n        const doc = typeof document !== 'undefined' ? document : undefined;\n        return doc ? doc.activeElement === this.input.nativeElement : false;\n    }\n\n    /**\n     * @name getErrorMessages\n     * @param messages\n     */\n    public getErrorMessages(messages: { [key: string]: string }): string[] {\n        return Object.keys(messages)\n            .filter(err => this.value.hasError(err))\n            .map(err => messages[err]);\n    }\n\n    /**\n     * @name hasErrors\n     */\n    public hasErrors(): boolean {\n        const { dirty, value, valid } = this.form;\n        return dirty && value.item && !valid;\n    }\n\n    /**\n     * @name focus\n     */\n    public focus(): void {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * @name blur\n     */\n    public blur(): void {\n        this.input.nativeElement.blur();\n    }\n\n    /**\n     * @name getElementPosition\n     */\n    public getElementPosition(): ClientRect {\n        return this.input.nativeElement.getBoundingClientRect();\n    }\n\n    /**\n     * - removes input from the component\n     * @name destroy\n     */\n    public destroy(): void {\n        const input = this.input.nativeElement;\n        input.parentElement.removeChild(input);\n    }\n\n    /**\n     * @name onKeyDown\n     * @param $event\n     */\n    public onKeyDown($event) {\n        this.inputText = this.value.value;\n        if ($event.key === 'Enter') {\n            this.submit($event);\n        } else {\n          return this.onKeydown.emit($event);\n        }\n    }\n\n    /**\n     * @name onKeyUp\n     * @param $event\n     */\n    public onKeyUp($event) {\n        this.inputText = this.value.value;\n        return this.onKeyup.emit($event);\n    }\n\n    /**\n     * @name submit\n     */\n    public submit($event: any): void {\n        $event.preventDefault();\n        this.onSubmit.emit($event);\n    }\n}\n","import {\n    Component,\n    Input\n} from '@angular/core';\n\n\nimport {\n    animate,\n    trigger,\n    style,\n    transition,\n    keyframes,\n    state\n} from '@angular/animations';\n\n@Component({\n    selector: 'tag-ripple',\n    styles: [`\n        :host {\n            width: 100%;\n            height: 100%;\n            left: 0;\n            overflow: hidden;\n            position: absolute;\n        }\n\n        .tag-ripple {\n            background: rgba(0, 0, 0, 0.1);\n            top: 50%;\n            left: 50%;\n            height: 100%;\n            transform: translate(-50%, -50%);\n            position: absolute;\n        }\n    `],\n    template: `\n        <div class=\"tag-ripple\" [@ink]=\"state\"></div>\n    `,\n    animations: [\n        trigger('ink', [\n            state('none', style({width: 0, opacity: 0})),\n            transition('none => clicked', [\n                animate(300, keyframes([\n                    style({opacity: 1, offset: 0, width: '30%', borderRadius: '100%'}),\n                    style({opacity: 1, offset: 0.5, width: '50%'}),\n                    style({opacity: 0.5, offset: 1, width: '100%', borderRadius: '16px'})\n                ]))\n            ])\n        ])\n    ]\n})\nexport class TagRipple {\n    @Input() public state = 'none';\n}\n","import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    TemplateRef,\n    ElementRef,\n    HostListener,\n    HostBinding,\n    ViewChild,\n    ChangeDetectorRef,\n    Renderer2\n} from '@angular/core';\n\nimport { TagModel } from '../../core/accessor';\nimport { TagRipple } from '../tag/tag-ripple.component';\nimport { EventLike } from '../../core/helpers/event-like';\n\n// mocking navigator\nconst navigator = typeof window !== 'undefined' ? window.navigator : {\n    userAgent: 'Chrome',\n    vendor: 'Google Inc'\n};\n\nconst isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\n\n@Component({\n    selector: 'tag',\n    templateUrl: './tag.template.html',\n    styleUrls: ['./tag-component.style.scss']\n})\nexport class TagComponent {\n    /**\n     * @name model {TagModel}\n     */\n    @Input()\n    public model: TagModel;\n\n    /**\n     * @name removable {boolean}\n     */\n    @Input()\n    public removable: boolean;\n\n    /**\n     * @name editable {boolean}\n     */\n    @Input()\n    public editable: boolean;\n\n    /**\n     * @name template {TemplateRef<any>}\n     */\n    @Input()\n    public template: TemplateRef<any>;\n\n    /**\n     * @name displayBy {string}\n     */\n    @Input()\n    public displayBy: string;\n\n    /**\n     * @name identifyBy {string}\n     */\n    @Input()\n    public identifyBy: string;\n\n    /**\n     * @name index {number}\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @name hasRipple\n     */\n    @Input()\n    public hasRipple: boolean;\n\n    /**\n     * @name disabled\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * @name canAddTag\n     */\n    @Input()\n    public canAddTag: (tag: TagModel) => boolean;\n\n    /**\n     * @name onSelect\n     */\n    @Output()\n    public onSelect: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     */\n    @Output()\n    public onRemove: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onBlur\n     */\n    @Output()\n    public onBlur: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onKeyDown\n     */\n    @Output()\n    public onKeyDown: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * @name onTagEdited\n     */\n    @Output()\n    public onTagEdited: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name readonly {boolean}\n     */\n    public get readonly(): boolean {\n        return typeof this.model !== 'string' && this.model.readonly === true;\n    }\n\n    /**\n     * @name editing\n     */\n    public editing = false;\n\n    /**\n     * @name moving\n     */\n    @HostBinding('class.moving')\n    public moving: boolean;\n\n    /**\n     * @name rippleState\n     */\n    public rippleState = 'none';\n\n    /**\n     * @name ripple {TagRipple}\n     */\n    @ViewChild(TagRipple, { static: false })\n    public ripple: TagRipple;\n\n    constructor(\n        public element: ElementRef,\n        public renderer: Renderer2,\n        private cdRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * @name select\n     */\n    public select($event?: MouseEvent): void {\n        if (this.readonly || this.disabled) {\n            return;\n        }\n\n        if ($event) {\n            $event.stopPropagation();\n        }\n\n        this.focus();\n\n        this.onSelect.emit(this.model);\n    }\n\n    /**\n     * @name remove\n     */\n    public remove($event: MouseEvent): void {\n        $event.stopPropagation();\n        this.onRemove.emit(this);\n    }\n\n    /**\n     * @name focus\n     */\n    public focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    public move(): void {\n        this.moving = true;\n    }\n\n    /**\n     * @name keydown\n     * @param event\n     */\n    @HostListener('keydown', ['$event'])\n    public keydown(event: EventLike): void {\n        if (this.editing) {\n            if (event.keyCode === 13) {\n                return this.disableEditMode(event);\n            }\n        } else {\n            this.onKeyDown.emit({ event, model: this.model });\n        }\n    }\n\n    /**\n     * @name blink\n     */\n    public blink(): void {\n        const classList = this.element.nativeElement.classList;\n        classList.add('blink');\n\n        setTimeout(() => classList.remove('blink'), 50);\n    }\n\n    /**\n     * @name toggleEditMode\n     */\n    public toggleEditMode(): void {\n        if (this.editable) {\n            return this.editing ? undefined : this.activateEditMode();\n        }\n    }\n\n    /**\n     * @name onBlurred\n     * @param event\n     */\n    public onBlurred(event: any): void {\n        // Checks if it is editable first before handeling the onBlurred event in order to prevent\n        // a bug in IE where tags are still editable with onlyFromAutocomplete set to true\n        if (!this.editable) {\n            return;\n        }\n\n        this.disableEditMode();\n\n        const value: string = event.target.innerText;\n        const result =\n            typeof this.model === 'string'\n                ? value\n                : { ...this.model, [this.displayBy]: value };\n\n        this.onBlur.emit(result);\n    }\n\n    /**\n     * @name getDisplayValue\n     * @param item\n     */\n    public getDisplayValue(item: TagModel): string {\n        return typeof item === 'string' ? item : item[this.displayBy];\n    }\n\n    /**\n     * @desc returns whether the ripple is visible or not\n     * only works in Chrome\n     * @name isRippleVisible\n     */\n    public get isRippleVisible(): boolean {\n        return !this.readonly && !this.editing && isChrome && this.hasRipple;\n    }\n\n    /**\n     * @name disableEditMode\n     * @param $event\n     */\n    public disableEditMode($event?: EventLike): void {\n        const classList = this.element.nativeElement.classList;\n        const input = this.getContentEditableText();\n\n        this.editing = false;\n        classList.remove('tag--editing');\n\n        if (!input) {\n            this.setContentEditableText(this.model);\n            return;\n        }\n\n        this.storeNewValue(input);\n        this.cdRef.detectChanges();\n\n        if ($event) {\n            $event.preventDefault();\n        }\n    }\n\n    /**\n     * @name isDeleteIconVisible\n     */\n    public isDeleteIconVisible(): boolean {\n        return (\n            !this.readonly && !this.disabled && this.removable && !this.editing\n        );\n    }\n\n    /**\n     * @name getContentEditableText\n     */\n    private getContentEditableText(): string {\n        const input = this.getContentEditable();\n\n        return input ? input.innerText.trim() : '';\n    }\n\n    /**\n     * @name setContentEditableText\n     * @param model\n     */\n    private setContentEditableText(model: TagModel) {\n        const input = this.getContentEditable();\n        const value = this.getDisplayValue(model);\n\n        input.innerText = value;\n    }\n\n    /**\n     * @name\n     */\n    private activateEditMode(): void {\n        const classList = this.element.nativeElement.classList;\n        classList.add('tag--editing');\n\n        this.editing = true;\n    }\n\n    /**\n     * @name storeNewValue\n     * @param input\n     */\n    private storeNewValue(input: string): void {\n        const exists = (tag: TagModel) => {\n            return typeof tag === 'string'\n                ? tag === input\n                : tag[this.displayBy] === input;\n        };\n\n        const hasId = () => {\n            return this.model[this.identifyBy] !== this.model[this.displayBy];\n        };\n\n        // if the value changed, replace the value in the model\n        if (exists(this.model)) {\n            return;\n        }\n\n        const model =\n            typeof this.model === 'string'\n                ? input\n                : {\n                      index: this.index,\n                      [this.identifyBy]: hasId()\n                          ? this.model[this.identifyBy]\n                          : input,\n                      [this.displayBy]: input\n                  };\n\n        if (this.canAddTag(model)) {\n            this.onTagEdited.emit({ tag: model, index: this.index });\n        } else {\n            this.setContentEditableText(this.model);\n        }\n    }\n\n    /**\n     * @name getContentEditable\n     */\n    private getContentEditable(): HTMLInputElement {\n        return this.element.nativeElement.querySelector('[contenteditable]');\n    }\n}\n","import {\n    animate,\n    trigger,\n    style,\n    transition,\n    keyframes,\n    state,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n/**\n * @name animations\n */\nexport const animations = [\n    trigger('animation', [\n        state('in', style({\n            opacity: 1\n        })),\n        state('out', style({\n            opacity: 0\n        })),\n        transition(':enter', [\n            animate('{{ enter }}', keyframes([\n                style({opacity: 0, offset: 0, transform: 'translate(0px, 20px)'}),\n                style({opacity: 0.3, offset: 0.3, transform: 'translate(0px, -10px)'}),\n                style({opacity: 0.5, offset: 0.5, transform: 'translate(0px, 0px)'}),\n                style({opacity: 0.75, offset: 0.75, transform: 'translate(0px, 5px)'}),\n                style({opacity: 1, offset: 1, transform: 'translate(0px, 0px)'})\n            ]))\n        ]),\n        transition(':leave', [\n            animate('{{ leave }}', keyframes([\n                style({opacity: 1, transform: 'translateX(0)', offset: 0}),\n                style({opacity: 1, transform: 'translateX(-15px)', offset: 0.7}),\n                style({opacity: 0, transform: 'translateX(100%)', offset: 1.0})\n            ]))\n        ])\n    ])\n];\n","import {\n  Component,\n  ContentChildren,\n  EventEmitter,\n  HostListener,\n  Injector,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  AfterViewInit\n} from '@angular/core';\n\n// rx\nimport { Observable } from 'rxjs';\nimport { filter, first, debounceTime } from 'rxjs/operators';\n\nimport { Ng2Dropdown, Ng2MenuItem } from 'ng2-material-dropdown';\nimport { defaults } from '../../defaults';\nimport { TagModel } from '../../core/accessor';\nimport { TagInputComponent } from '../tag-input/tag-input';\n\n@Component({\n  selector: 'tag-input-dropdown',\n  templateUrl: './tag-input-dropdown.template.html'\n})\nexport class TagInputDropdown implements AfterViewInit {\n  /**\n   * @name dropdown\n   */\n  @ViewChild(Ng2Dropdown, { static: false }) public dropdown: Ng2Dropdown;\n\n  /**\n   * @name menuTemplate\n   * @desc reference to the template if provided by the user\n   */\n  @ContentChildren(TemplateRef) public templates: QueryList<TemplateRef<any>>;\n\n  /**\n   * @name offset\n   */\n  @Input() public offset: string = defaults.dropdown.offset;\n\n  /**\n   * @name focusFirstElement\n   */\n  @Input() public focusFirstElement = defaults.dropdown.focusFirstElement;\n\n  /**\n   * - show autocomplete dropdown if the value of input is empty\n   * @name showDropdownIfEmpty\n   */\n  @Input() public showDropdownIfEmpty = defaults.dropdown.showDropdownIfEmpty;\n\n  /**\n   * @description observable passed as input which populates the autocomplete items\n   * @name autocompleteObservable\n   */\n  @Input() public autocompleteObservable: (text: string) => Observable<any>;\n\n  /**\n   * - desc minimum text length in order to display the autocomplete dropdown\n   * @name minimumTextLength\n   */\n  @Input() public minimumTextLength = defaults.dropdown.minimumTextLength;\n\n  /**\n   * - number of items to display in the autocomplete dropdown\n   * @name limitItemsTo\n   */\n  @Input() public limitItemsTo: number = defaults.dropdown.limitItemsTo;\n\n  /**\n   * @name displayBy\n   */\n  @Input() public displayBy = defaults.dropdown.displayBy;\n\n  /**\n   * @name identifyBy\n   */\n  @Input() public identifyBy = defaults.dropdown.identifyBy;\n\n  /**\n   * @description a function a developer can use to implement custom matching for the autocomplete\n   * @name matchingFn\n   */\n  @Input() public matchingFn: (value: string, target: TagModel) => boolean =\n    defaults.dropdown.matchingFn;\n\n  /**\n   * @name appendToBody\n   */\n  @Input() public appendToBody = defaults.dropdown.appendToBody;\n\n  /**\n   * @name keepOpen\n   * @description option to leave dropdown open when adding a new item\n   */\n  @Input() public keepOpen = defaults.dropdown.keepOpen;\n\n  /**\n   * @name dynamicUpdate\n   */\n  @Input() public dynamicUpdate = defaults.dropdown.dynamicUpdate;\n\n  /**\n   * @name zIndex\n   */\n  @Input() public zIndex = defaults.dropdown.zIndex;\n\n  /**\n   * list of items that match the current value of the input (for autocomplete)\n   * @name items\n   */\n  public items: TagModel[] = [];\n\n  /**\n   * @name tagInput\n   */\n  public tagInput: TagInputComponent = this.injector.get(TagInputComponent);\n\n  /**\n   * @name _autocompleteItems\n   */\n  private _autocompleteItems: TagModel[] = [];\n\n  /**\n   * @name autocompleteItems\n   * @param items\n   */\n  public set autocompleteItems(items: TagModel[]) {\n    this._autocompleteItems = items;\n  }\n\n  /**\n   * @name autocompleteItems\n   * @desc array of items that will populate the autocomplete\n   */\n  @Input() public get autocompleteItems(): TagModel[] {\n    const items = this._autocompleteItems;\n\n    if (!items) {\n      return [];\n    }\n\n    return items.map((item: TagModel) => {\n      return typeof item === 'string'\n        ? {\n            [this.displayBy]: item,\n            [this.identifyBy]: item\n          }\n        : item;\n    });\n  }\n\n  constructor(private readonly injector: Injector) {}\n\n  /**\n   * @name ngAfterviewInit\n   */\n  ngAfterViewInit(): void {\n    this.onItemClicked().subscribe((item: Ng2MenuItem) => {\n      this.requestAdding(item);\n    });\n\n    // reset itemsMatching array when the dropdown is hidden\n    this.onHide().subscribe(this.resetItems);\n\n    const DEBOUNCE_TIME = 200;\n    const KEEP_OPEN = this.keepOpen;\n\n    this.tagInput.onTextChange\n      .asObservable()\n      .pipe(\n        debounceTime(DEBOUNCE_TIME),\n        filter((value: string) => {\n          if (KEEP_OPEN === false) {\n            return value.length > 0;\n          }\n\n          return true;\n        })\n      )\n      .subscribe(this.show);\n  }\n\n  /**\n   * @name updatePosition\n   */\n  public updatePosition(): void {\n    const position = this.tagInput.inputForm.getElementPosition();\n\n    this.dropdown.menu.updatePosition(position, this.dynamicUpdate);\n  }\n\n  /**\n   * @name isVisible\n   */\n  public get isVisible(): boolean {\n    return this.dropdown.menu.dropdownState.menuState.isVisible;\n  }\n\n  /**\n   * @name onHide\n   */\n  public onHide(): EventEmitter<Ng2Dropdown> {\n    return this.dropdown.onHide;\n  }\n\n  /**\n   * @name onItemClicked\n   */\n  public onItemClicked(): EventEmitter<string> {\n    return this.dropdown.onItemClicked;\n  }\n\n  /**\n   * @name selectedItem\n   */\n  public get selectedItem(): Ng2MenuItem {\n    return this.dropdown.menu.dropdownState.dropdownState.selectedItem;\n  }\n\n  /**\n   * @name state\n   */\n  public get state(): any {\n    return this.dropdown.menu.dropdownState;\n  }\n\n  /**\n   *\n   * @name show\n   */\n  public show = (): void => {\n    const maxItemsReached =\n      this.tagInput.items.length === this.tagInput.maxItems;\n    const value = this.getFormValue();\n    const hasMinimumText = value.trim().length >= this.minimumTextLength;\n    const position = this.calculatePosition();\n    const items = this.getMatchingItems(value);\n    const hasItems = items.length > 0;\n    const isHidden = this.isVisible === false;\n    const showDropdownIfEmpty = this.showDropdownIfEmpty && hasItems && !value;\n    const isDisabled = this.tagInput.disable;\n\n    const shouldShow =\n      isHidden && ((hasItems && hasMinimumText) || showDropdownIfEmpty);\n    const shouldHide = this.isVisible && !hasItems;\n\n    if (this.autocompleteObservable && hasMinimumText) {\n      return this.getItemsFromObservable(value);\n    }\n\n    if (\n      (!this.showDropdownIfEmpty && !value) ||\n      maxItemsReached ||\n      isDisabled\n    ) {\n      return this.dropdown.hide();\n    }\n\n    this.setItems(items);\n\n    if (shouldShow) {\n      this.dropdown.show(position);\n    } else if (shouldHide) {\n      this.hide();\n    }\n  };\n\n  /**\n   * @name hide\n   */\n  public hide(): void {\n    this.resetItems();\n    this.dropdown.hide();\n  }\n\n  /**\n   * @name scrollListener\n   */\n  @HostListener('window:scroll')\n  public scrollListener(): void {\n    if (!this.isVisible || !this.dynamicUpdate) {\n      return;\n    }\n\n    this.updatePosition();\n  }\n\n  /**\n   * @name onWindowBlur\n   */\n  @HostListener('window:blur')\n  public onWindowBlur(): void {\n    this.dropdown.hide();\n  }\n\n  /**\n   * @name getFormValue\n   */\n  private getFormValue(): string {\n    const formValue = this.tagInput.formValue;\n    return formValue ? formValue.toString().trim() : '';\n  }\n\n  /**\n   * @name calculatePosition\n   */\n  private calculatePosition(): ClientRect {\n    return this.tagInput.inputForm.getElementPosition();\n  }\n\n  /**\n   * @name requestAdding\n   * @param item {Ng2MenuItem}\n   */\n  private requestAdding = async (item: Ng2MenuItem) => {\n    const tag = this.createTagModel(item);\n    await this.tagInput.onAddingRequested(true, tag).catch(() => {});\n  };\n\n  /**\n   * @name createTagModel\n   * @param item\n   */\n  private createTagModel(item: Ng2MenuItem): TagModel {\n    const display =\n      typeof item.value === 'string' ? item.value : item.value[this.displayBy];\n    const value =\n      typeof item.value === 'string' ? item.value : item.value[this.identifyBy];\n\n    return {\n      ...item.value,\n      [this.tagInput.displayBy]: display,\n      [this.tagInput.identifyBy]: value\n    };\n  }\n\n  /**\n   *\n   * @param value {string}\n   */\n  private getMatchingItems(value: string): TagModel[] {\n    if (!value && !this.showDropdownIfEmpty) {\n      return [];\n    }\n\n    const dupesAllowed = this.tagInput.allowDupes;\n\n    return this.autocompleteItems.filter((item: TagModel) => {\n      const hasValue = dupesAllowed\n        ? false\n        : this.tagInput.tags.some(tag => {\n            const identifyBy = this.tagInput.identifyBy;\n            const model =\n              typeof tag.model === 'string' ? tag.model : tag.model[identifyBy];\n\n            return model === item[this.identifyBy];\n          });\n\n      return this.matchingFn(value, item) && hasValue === false;\n    });\n  }\n\n  /**\n   * @name setItems\n   */\n  private setItems(items: TagModel[]): void {\n    this.items = items.slice(0, this.limitItemsTo || items.length);\n  }\n\n  /**\n   * @name resetItems\n   */\n  private resetItems = (): void => {\n    this.items = [];\n  };\n\n  /**\n   * @name populateItems\n   * @param data\n   */\n  private populateItems(data: any): TagInputDropdown {\n    this.autocompleteItems = data.map(item => {\n      return typeof item === 'string'\n        ? {\n            [this.displayBy]: item,\n            [this.identifyBy]: item\n          }\n        : item;\n    });\n\n    return this;\n  }\n\n  /**\n   * @name getItemsFromObservable\n   * @param text\n   */\n  private getItemsFromObservable = (text: string): void => {\n    this.setLoadingState(true);\n\n    const subscribeFn = (data: any[]) => {\n      // hide loading animation\n      this.setLoadingState(false)\n        // add items\n        .populateItems(data);\n\n      this.setItems(this.getMatchingItems(text));\n\n      if (this.items.length) {\n        this.dropdown.show(this.calculatePosition());\n      } else {\n        this.dropdown.hide();\n      }\n    };\n\n    this.autocompleteObservable(text)\n      .pipe(first())\n      .subscribe(subscribeFn, () => this.setLoadingState(false));\n  };\n\n  /**\n   * @name setLoadingState\n   * @param state\n   */\n  private setLoadingState(state: boolean): TagInputDropdown {\n    this.tagInput.isLoading = state;\n\n    return this;\n  }\n}\n","// angular\nimport {\n    Component,\n    forwardRef,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    Renderer2,\n    ViewChild,\n    ViewChildren,\n    ContentChildren,\n    ContentChild,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    AfterViewInit\n} from '@angular/core';\n\nimport {\n    AsyncValidatorFn,\n    FormControl,\n    NG_VALUE_ACCESSOR,\n    ValidatorFn\n} from '@angular/forms';\n\n// rx\nimport { Observable } from 'rxjs';\nimport { debounceTime, filter, map, first } from 'rxjs/operators';\n\n// ng2-tag-input\nimport { TagInputAccessor, TagModel } from '../../core/accessor';\nimport { listen } from '../../core/helpers/listen';\nimport * as constants from '../../core/constants';\n\nimport { DragProvider, DraggedTag } from '../../core/providers/drag-provider';\n\nimport { TagInputForm } from '../tag-input-form/tag-input-form.component';\nimport { TagComponent } from '../tag/tag.component';\n\nimport { animations } from './animations';\nimport { defaults } from '../../defaults';\nimport { TagInputDropdown } from '../dropdown/tag-input-dropdown.component';\n\n// angular universal hacks\n/* tslint:disable-next-line */\nconst DragEvent = (window as any).DragEvent;\n\nconst CUSTOM_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TagInputComponent),\n    multi: true\n};\n@Component({\n    selector: 'tag-input',\n    providers: [CUSTOM_ACCESSOR],\n    styleUrls: ['./tag-input.style.scss'],\n    templateUrl: './tag-input.template.html',\n    animations\n})\nexport class TagInputComponent extends TagInputAccessor implements OnInit, AfterViewInit {\n    /**\n     * @name separatorKeys\n     * @desc keyboard keys with which a user can separate items\n     */\n    @Input() public separatorKeys: string[] = defaults.tagInput.separatorKeys;\n\n    /**\n     * @name separatorKeyCodes\n     * @desc keyboard key codes with which a user can separate items\n     */\n    @Input() public separatorKeyCodes: number[] = defaults.tagInput.separatorKeyCodes;\n\n    /**\n     * @name placeholder\n     * @desc the placeholder of the input text\n     */\n    @Input() public placeholder: string = defaults.tagInput.placeholder;\n\n    /**\n     * @name secondaryPlaceholder\n     * @desc placeholder to appear when the input is empty\n     */\n    @Input() public secondaryPlaceholder: string = defaults.tagInput.secondaryPlaceholder;\n\n    /**\n     * @name maxItems\n     * @desc maximum number of items that can be added\n     */\n    @Input() public maxItems: number = defaults.tagInput.maxItems;\n\n    /**\n     * @name validators\n     * @desc array of Validators that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public validators: ValidatorFn[] = defaults.tagInput.validators;\n\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public asyncValidators: AsyncValidatorFn[] = defaults.tagInput.asyncValidators;\n\n    /**\n    * - if set to true, it will only possible to add items from the autocomplete\n    * @name onlyFromAutocomplete\n    */\n    @Input() public onlyFromAutocomplete = defaults.tagInput.onlyFromAutocomplete;\n\n    /**\n     * @name errorMessages\n     */\n    @Input() public errorMessages: { [key: string]: string } = defaults.tagInput.errorMessages;\n\n    /**\n     * @name theme\n     */\n    @Input() public theme: string = defaults.tagInput.theme;\n\n    /**\n     * @name onTextChangeDebounce\n     */\n    @Input() public onTextChangeDebounce = defaults.tagInput.onTextChangeDebounce;\n\n    /**\n     * - custom id assigned to the input\n     * @name id\n     */\n    @Input() public inputId = defaults.tagInput.inputId;\n\n    /**\n     * - custom class assigned to the input\n     */\n    @Input() public inputClass: string = defaults.tagInput.inputClass;\n\n    /**\n     * - option to clear text input when the form is blurred\n     * @name clearOnBlur\n     */\n    @Input() public clearOnBlur: boolean = defaults.tagInput.clearOnBlur;\n\n    /**\n     * - hideForm\n     * @name clearOnBlur\n     */\n    @Input() public hideForm: boolean = defaults.tagInput.hideForm;\n\n    /**\n     * @name addOnBlur\n     */\n    @Input() public addOnBlur: boolean = defaults.tagInput.addOnBlur;\n\n    /**\n     * @name addOnPaste\n     */\n    @Input() public addOnPaste: boolean = defaults.tagInput.addOnPaste;\n\n    /**\n     * - pattern used with the native method split() to separate patterns in the string pasted\n     * @name pasteSplitPattern\n     */\n    @Input() public pasteSplitPattern = defaults.tagInput.pasteSplitPattern;\n\n    /**\n     * @name blinkIfDupe\n     */\n    @Input() public blinkIfDupe = defaults.tagInput.blinkIfDupe;\n\n    /**\n     * @name removable\n     */\n    @Input() public removable = defaults.tagInput.removable;\n\n    /**\n     * @name editable\n     */\n    @Input() public editable: boolean = defaults.tagInput.editable;\n\n    /**\n     * @name allowDupes\n     */\n    @Input() public allowDupes = defaults.tagInput.allowDupes;\n\n    /**\n     * @description if set to true, the newly added tags will be added as strings, and not objects\n     * @name modelAsStrings\n     */\n    @Input() public modelAsStrings = defaults.tagInput.modelAsStrings;\n\n    /**\n     * @name trimTags\n     */\n    @Input() public trimTags = defaults.tagInput.trimTags;\n\n    /**\n     * @name inputText\n     */\n    @Input() public get inputText(): string {\n        return this.inputTextValue;\n    }\n\n    /**\n     * @name ripple\n     */\n    @Input() public ripple: boolean = defaults.tagInput.ripple;\n\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     */\n    @Input() public tabindex: string = defaults.tagInput.tabIndex;\n\n    /**\n     * @name disable\n     */\n    @Input() public disable: boolean = defaults.tagInput.disable;\n\n    /**\n     * @name dragZone\n     */\n    @Input() public dragZone: string = defaults.tagInput.dragZone;\n\n    /**\n     * @name onRemoving\n     */\n    @Input() public onRemoving = defaults.tagInput.onRemoving;\n\n    /**\n     * @name onAdding\n     */\n    @Input() public onAdding = defaults.tagInput.onAdding;\n\n    /**\n     * @name animationDuration\n     */\n    @Input() public animationDuration = defaults.tagInput.animationDuration;\n\n    /**\n     * @name onAdd\n     * @desc event emitted when adding a new item\n     */\n    @Output() public onAdd = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     * @desc event emitted when removing an existing item\n     */\n    @Output() public onRemove = new EventEmitter<TagModel>();\n\n    /**\n     * @name onSelect\n     * @desc event emitted when selecting an item\n     */\n    @Output() public onSelect = new EventEmitter<TagModel>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is focused\n     */\n    @Output() public onFocus = new EventEmitter<string>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is blurred\n     */\n    @Output() public onBlur = new EventEmitter<string>();\n\n    /**\n     * @name onTextChange\n     * @desc event emitted when the input value changes\n     */\n    @Output() public onTextChange = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when text is pasted in the form\n     * @name onPaste\n     */\n    @Output() public onPaste = new EventEmitter<string>();\n\n    /**\n     * - output triggered when tag entered is not valid\n     * @name onValidationError\n     */\n    @Output() public onValidationError = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when tag is edited\n     * @name onTagEdited\n     */\n    @Output() public onTagEdited = new EventEmitter<TagModel>();\n\n    /**\n     * @name dropdown\n     */\n    // @ContentChild(forwardRef(() => TagInputDropdown), {static: true}) dropdown: TagInputDropdown;\n    @ContentChild(TagInputDropdown, { static: false }) public dropdown: TagInputDropdown;\n    /**\n     * @name template\n     * @desc reference to the template if provided by the user\n     */\n    @ContentChildren(TemplateRef, { descendants: false }) public templates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @name inputForm\n     */\n    @ViewChild(TagInputForm, { static: false }) public inputForm: TagInputForm;\n\n    /**\n     * @name selectedTag\n     * @desc reference to the current selected tag\n     */\n    public selectedTag: TagModel | undefined;\n\n    /**\n     * @name isLoading\n     */\n    public isLoading = false;\n\n    /**\n     * @name inputText\n     * @param text\n     */\n    public set inputText(text: string) {\n        this.inputTextValue = text;\n        this.inputTextChange.emit(text);\n    }\n\n    /**\n     * @name tags\n     * @desc list of Element items\n     */\n    @ViewChildren(TagComponent) public tags: QueryList<TagComponent>;\n\n    /**\n     * @name listeners\n     * @desc array of events that get fired using @fireEvents\n     */\n    private listeners = {\n        [constants.KEYDOWN]: <{ (fun): any }[]>[],\n        [constants.KEYUP]: <{ (fun): any }[]>[]\n    };\n\n    /**\n     * @description emitter for the 2-way data binding inputText value\n     * @name inputTextChange\n     */\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\n\n    /**\n     * @description private variable to bind get/set\n     * @name inputTextValue\n     */\n    public inputTextValue = '';\n\n    /**\n     * @desc removes the tab index if it is set - it will be passed through to the input\n     * @name tabindexAttr\n     */\n    @HostBinding('attr.tabindex')\n    public get tabindexAttr(): string {\n        return this.tabindex !== '' ? '-1' : '';\n    }\n\n    /**\n     * @name animationMetadata\n     */\n    public animationMetadata: { value: string, params: object };\n\n    public errors: string[] = [];\n\n    public isProgressBarVisible$: Observable<boolean>;\n\n    constructor(private readonly renderer: Renderer2,\n        public readonly dragProvider: DragProvider) {\n        super();\n    }\n\n    /**\n     * @name ngAfterViewInit\n     */\n    public ngAfterViewInit(): void {\n        // set up listeners\n\n        this.setUpKeypressListeners();\n        this.setupSeparatorKeysListener();\n        this.setUpInputKeydownListeners();\n\n        if (this.onTextChange.observers.length) {\n            this.setUpTextChangeSubscriber();\n        }\n\n        // if clear on blur is set to true, subscribe to the event and clear the text's form\n        if (this.clearOnBlur || this.addOnBlur) {\n            this.setUpOnBlurSubscriber();\n        }\n\n        // if addOnPaste is set to true, register the handler and add items\n        if (this.addOnPaste) {\n            this.setUpOnPasteListener();\n        }\n\n        const statusChanges$ = this.inputForm.form.statusChanges;\n\n        statusChanges$.pipe(\n            filter((status: string) => status !== 'PENDING')\n        ).subscribe(() => {\n            this.errors = this.inputForm.getErrorMessages(this.errorMessages);\n        });\n\n        this.isProgressBarVisible$ = statusChanges$.pipe(\n            map((status: string) => {\n                return status === 'PENDING' || this.isLoading;\n            })\n        );\n\n        // if hideForm is set to true, remove the input\n        if (this.hideForm) {\n            this.inputForm.destroy();\n        }\n    }\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit(): void {\n        // if the number of items specified in the model is > of the value of maxItems\n        // degrade gracefully and let the max number of items to be the number of items in the model\n        // though, warn the user.\n        const hasReachedMaxItems = this.maxItems !== undefined &&\n            this.items &&\n            this.items.length > this.maxItems;\n\n        if (hasReachedMaxItems) {\n            this.maxItems = this.items.length;\n            console.warn(constants.MAX_ITEMS_WARNING);\n        }\n\n        // Setting editable to false to fix problem with tags in IE still being editable when\n        // onlyFromAutocomplete is true\n        this.editable = this.onlyFromAutocomplete ? false : this.editable;\n\n        this.setAnimationMetadata();\n    }\n\n    /**\n     * @name onRemoveRequested\n     * @param tag\n     * @param index\n     */\n    public onRemoveRequested(tag: TagModel, index: number): Promise<TagModel> {\n        return new Promise(resolve => {\n            const subscribeFn = (model: TagModel) => {\n                this.removeItem(model, index);\n                resolve(tag);\n            };\n\n            this.onRemoving ?\n                this.onRemoving(tag)\n                    .pipe(first())\n                    .subscribe(subscribeFn) : subscribeFn(tag);\n        });\n    }\n\n    /**\n     * @name onAddingRequested\n     * @param fromAutocomplete {boolean}\n     * @param tag {TagModel}\n     * @param index? {number}\n     * @param giveupFocus? {boolean}\n     */\n    public onAddingRequested(fromAutocomplete: boolean, tag: TagModel,\n        index?: number, giveupFocus?: boolean): Promise<TagModel> {\n        return new Promise((resolve, reject) => {\n            const subscribeFn = (model: TagModel) => {\n                return this\n                    .addItem(fromAutocomplete, model, index, giveupFocus)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            return this.onAdding ?\n                this.onAdding(tag)\n                    .pipe(first())\n                    .subscribe(subscribeFn, reject) : subscribeFn(tag);\n        });\n    }\n\n    /**\n     * @name appendTag\n     * @param tag {TagModel}\n     */\n    public appendTag = (tag: TagModel, index = this.items.length): void => {\n        const items = this.items;\n        const model = this.modelAsStrings ? tag[this.identifyBy] : tag;\n\n        this.items = [\n            ...items.slice(0, index),\n            model,\n            ...items.slice(index, items.length)\n        ];\n    }\n\n    /**\n     * @name createTag\n     * @param model\n     */\n    public createTag = (model: TagModel): TagModel => {\n        const trim = (val: TagModel, key: string): TagModel => {\n            return typeof val === 'string' ? val.trim() : val[key];\n        };\n\n        return {\n            ...typeof model !== 'string' ? model : {},\n            [this.displayBy]: this.trimTags ? trim(model, this.displayBy) : model,\n            [this.identifyBy]: this.trimTags ? trim(model, this.identifyBy) : model\n        };\n    }\n\n    /**\n     * @name selectItem\n     * @desc selects item passed as parameter as the selected tag\n     * @param item\n     * @param emit\n     */\n    public selectItem(item: TagModel | undefined, emit = true): void {\n        const isReadonly = item && typeof item !== 'string' && item.readonly;\n\n        if (isReadonly || this.selectedTag === item) {\n            return;\n        }\n\n        this.selectedTag = item;\n\n        if (emit) {\n            this.onSelect.emit(item);\n        }\n    }\n\n    /**\n     * @name fireEvents\n     * @desc goes through the list of the events for a given eventName, and fires each of them\n     * @param eventName\n     * @param $event\n     */\n    public fireEvents(eventName: string, $event?): void {\n        this.listeners[eventName].forEach(listener => listener.call(this, $event));\n    }\n\n    /**\n     * @name handleKeydown\n     * @desc handles action when the user hits a keyboard key\n     * @param data\n     */\n    public handleKeydown(data: any): void {\n        const event = data.event;\n        const key = event.keyCode || event.which;\n        const shiftKey = event.shiftKey || false;\n\n        switch (constants.KEY_PRESS_ACTIONS[key]) {\n            case constants.ACTIONS_KEYS.DELETE:\n                if (this.selectedTag && this.removable) {\n                    const index = this.items.indexOf(this.selectedTag);\n                    this.onRemoveRequested(this.selectedTag, index);\n                }\n                break;\n\n            case constants.ACTIONS_KEYS.SWITCH_PREV:\n                this.moveToTag(data.model, constants.PREV);\n                break;\n\n            case constants.ACTIONS_KEYS.SWITCH_NEXT:\n                this.moveToTag(data.model, constants.NEXT);\n                break;\n\n            case constants.ACTIONS_KEYS.TAB:\n                if (shiftKey) {\n                    if (this.isFirstTag(data.model)) {\n                        return;\n                    }\n\n                    this.moveToTag(data.model, constants.PREV);\n                } else {\n                    if (this.isLastTag(data.model) && (this.disable || this.maxItemsReached)) {\n                        return;\n                    }\n\n                    this.moveToTag(data.model, constants.NEXT);\n                }\n                break;\n\n            default:\n                return;\n        }\n\n        // prevent default behaviour\n        event.preventDefault();\n    }\n\n    public async onFormSubmit() {\n        try {\n            await this.onAddingRequested(false, this.formValue);\n        } catch {\n            return;\n        }\n    }\n\n    /**\n     * @name setInputValue\n     * @param value\n     */\n    public setInputValue(value: string, emitEvent = true): void {\n        const control = this.getControl();\n\n        // update form value with the transformed item\n        control.setValue(value, { emitEvent });\n    }\n\n    /**\n     * @name getControl\n     */\n    private getControl(): FormControl {\n        return this.inputForm.value as FormControl;\n    }\n\n    /**\n     * @name focus\n     * @param applyFocus\n     * @param displayAutocomplete\n     */\n    public focus(applyFocus = false, displayAutocomplete = false): void {\n        if (this.dragProvider.getState('dragging')) {\n            return;\n        }\n\n        this.selectItem(undefined, false);\n\n        if (applyFocus) {\n            this.inputForm.focus();\n            this.onFocus.emit(this.formValue);\n        }\n    }\n\n    /**\n     * @name blur\n     */\n    public blur(): void {\n        this.onTouched();\n\n        this.onBlur.emit(this.formValue);\n    }\n\n    /**\n     * @name hasErrors\n     */\n    public hasErrors(): boolean {\n        return !!this.inputForm && this.inputForm.hasErrors();\n    }\n\n    /**\n     * @name isInputFocused\n     */\n    public isInputFocused(): boolean {\n        return !!this.inputForm && this.inputForm.isInputFocused();\n    }\n\n    /**\n     * - this is the one way I found to tell if the template has been passed and it is not\n     * the template for the menu item\n     * @name hasCustomTemplate\n     */\n    public hasCustomTemplate(): boolean {\n        const template = this.templates ? this.templates.first : undefined;\n        const menuTemplate = this.dropdown && this.dropdown.templates ?\n            this.dropdown.templates.first : undefined;\n\n        return Boolean(template && template !== menuTemplate);\n    }\n\n    /**\n     * @name maxItemsReached\n     */\n    public get maxItemsReached(): boolean {\n        return this.maxItems !== undefined &&\n            this.items.length >= this.maxItems;\n    }\n\n    /**\n     * @name formValue\n     */\n    public get formValue(): string {\n        const form = this.inputForm.value;\n\n        return form ? form.value : '';\n    }\n\n    /**3\n     * @name onDragStarted\n     * @param event\n     * @param index\n     */\n    public onDragStarted(event: DragEvent, tag: TagModel, index: number): void {\n        event.stopPropagation();\n\n        const item = { zone: this.dragZone, tag, index } as DraggedTag;\n\n        this.dragProvider.setSender(this);\n        this.dragProvider.setDraggedItem(event, item);\n        this.dragProvider.setState({ dragging: true, index });\n    }\n\n    /**\n     * @name onDragOver\n     * @param event\n     */\n    public onDragOver(event: DragEvent, index?: number): void {\n        this.dragProvider.setState({ dropping: true });\n        this.dragProvider.setReceiver(this);\n\n        event.preventDefault();\n    }\n\n    /**\n     * @name onTagDropped\n     * @param event\n     * @param index\n     */\n    public onTagDropped(event: DragEvent, index?: number): void {\n        const item = this.dragProvider.getDraggedItem(event);\n\n        if (!item || item.zone !== this.dragZone) {\n            return;\n        }\n\n        this.dragProvider.onTagDropped(item.tag, item.index, index);\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    /**\n     * @name isDropping\n     */\n    public isDropping(): boolean {\n        const isReceiver = this.dragProvider.receiver === this;\n        const isDropping = this.dragProvider.getState('dropping');\n\n        return Boolean(isReceiver && isDropping);\n    }\n\n    /**\n     * @name onTagBlurred\n     * @param changedElement {TagModel}\n     * @param index {number}\n     */\n    public onTagBlurred(changedElement: TagModel, index: number): void {\n        this.items[index] = changedElement;\n        this.blur();\n    }\n\n    /**\n     * @name trackBy\n     * @param items\n     */\n    public trackBy(index: number, item: TagModel): string {\n        return item[this.identifyBy];\n    }\n\n    /**\n     * @name updateEditedTag\n     * @param tag\n     */\n    public updateEditedTag({ tag, index }: { tag: TagModel, index: number }): void {\n        this.onTagEdited.emit(tag);\n    }\n\n    /**\n     *\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    public isTagValid = (tag: TagModel, fromAutocomplete = false): boolean => {\n        const selectedItem = this.dropdown ? this.dropdown.selectedItem : undefined;\n        const value = this.getItemDisplay(tag).trim();\n\n        if (selectedItem && !fromAutocomplete || !value) {\n            return false;\n        }\n\n        const dupe = this.findDupe(tag, fromAutocomplete);\n\n        // if so, give a visual cue and return false\n        if (!this.allowDupes && dupe && this.blinkIfDupe) {\n            const model = this.tags.find(item => {\n                return this.getItemValue(item.model) === this.getItemValue(dupe);\n            });\n\n            if (model) {\n                model.blink();\n            }\n        }\n\n        const isFromAutocomplete = fromAutocomplete && this.onlyFromAutocomplete;\n\n        const assertions = [\n            // 1. there must be no dupe OR dupes are allowed\n            !dupe || this.allowDupes,\n\n            // 2. check max items has not been reached\n            !this.maxItemsReached,\n\n            // 3. check item comes from autocomplete or onlyFromAutocomplete is false\n            ((isFromAutocomplete) || !this.onlyFromAutocomplete)\n        ];\n\n        return assertions.filter(Boolean).length === assertions.length;\n    }\n\n    /**\n     * @name moveToTag\n     * @param item\n     * @param direction\n     */\n    private moveToTag(item: TagModel, direction: string): void {\n        const isLast = this.isLastTag(item);\n        const isFirst = this.isFirstTag(item);\n        const stopSwitch = (direction === constants.NEXT && isLast) ||\n            (direction === constants.PREV && isFirst);\n\n        if (stopSwitch) {\n            this.focus(true);\n            return;\n        }\n\n        const offset = direction === constants.NEXT ? 1 : -1;\n        const index = this.getTagIndex(item) + offset;\n        const tag = this.getTagAtIndex(index);\n\n        return tag.select.call(tag);\n    }\n\n    /**\n     * @name isFirstTag\n     * @param item {TagModel}\n     */\n    private isFirstTag(item: TagModel): boolean {\n        return this.tags.first.model === item;\n    }\n\n    /**\n     * @name isLastTag\n     * @param item {TagModel}\n     */\n    private isLastTag(item: TagModel): boolean {\n        return this.tags.last.model === item;\n    }\n\n    /**\n     * @name getTagIndex\n     * @param item\n     */\n    private getTagIndex(item: TagModel): number {\n        const tags = this.tags.toArray();\n\n        return tags.findIndex(tag => tag.model === item);\n    }\n\n    /**\n     * @name getTagAtIndex\n     * @param index\n     */\n    private getTagAtIndex(index: number) {\n        const tags = this.tags.toArray();\n\n        return tags[index];\n    }\n\n    /**\n     * @name removeItem\n     * @desc removes an item from the array of the model\n     * @param tag {TagModel}\n     * @param index {number}\n     */\n    public removeItem(tag: TagModel, index: number): void {\n        this.items = this.getItemsWithout(index);\n\n        // if the removed tag was selected, set it as undefined\n        if (this.selectedTag === tag) {\n            this.selectItem(undefined, false);\n        }\n\n        // focus input\n        this.focus(true, false);\n\n        // emit remove event\n        this.onRemove.emit(tag);\n    }\n\n    /**\n     * @name addItem\n     * @desc adds the current text model to the items array\n     * @param fromAutocomplete {boolean}\n     * @param item {TagModel}\n     * @param index? {number}\n     * @param giveupFocus? {boolean}\n     */\n    private addItem(fromAutocomplete = false, item: TagModel, index?: number, giveupFocus?: boolean):\n        Promise<TagModel> {\n        const display = this.getItemDisplay(item);\n        const tag = this.createTag(item);\n\n        if (fromAutocomplete) {\n            this.setInputValue(this.getItemValue(item, true));\n        }\n\n        return new Promise((resolve, reject) => {\n            /**\n             * @name reset\n             */\n            const reset = (): void => {\n                // reset control and focus input\n                this.setInputValue('');\n\n                if (giveupFocus) {\n                    this.focus(false, false);\n                } else {\n                    // focus input\n                    this.focus(true, false);\n                }\n\n                resolve(display);\n            };\n\n            const appendItem = (): void => {\n                this.appendTag(tag, index);\n\n                // emit event\n                this.onAdd.emit(tag);\n\n                if (!this.dropdown) {\n                    return;\n                }\n\n                this.dropdown.hide();\n\n                if (this.dropdown.showDropdownIfEmpty) {\n                    this.dropdown.show();\n                }\n            };\n\n            const status = this.inputForm.form.status;\n            const isTagValid = this.isTagValid(tag, fromAutocomplete);\n\n            const onValidationError = () => {\n                this.onValidationError.emit(tag);\n                return reject();\n            };\n\n            if (status === 'VALID' && isTagValid) {\n                appendItem();\n                return reset();\n            }\n\n            if (status === 'INVALID' || !isTagValid) {\n                reset();\n                return onValidationError();\n            }\n\n            if (status === 'PENDING') {\n                const statusUpdate$ = this.inputForm.form.statusChanges;\n\n                return statusUpdate$\n                    .pipe(\n                        filter(statusUpdate => statusUpdate !== 'PENDING'),\n                        first()\n                    )\n                    .subscribe((statusUpdate) => {\n                        if (statusUpdate === 'VALID' && isTagValid) {\n                            appendItem();\n                            return reset();\n                        } else {\n                            reset();\n                            return onValidationError();\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * @name setupSeparatorKeysListener\n     */\n    private setupSeparatorKeysListener(): void {\n        const useSeparatorKeys = this.separatorKeyCodes.length > 0 || this.separatorKeys.length > 0;\n        const listener = ($event) => {\n            const hasKeyCode = this.separatorKeyCodes.indexOf($event.keyCode) >= 0;\n            const hasKey = this.separatorKeys.indexOf($event.key) >= 0;\n            // the keyCode of keydown event is 229 when IME is processing the key event.\n            const isIMEProcessing = $event.keyCode === 229;\n\n            if (hasKeyCode || (hasKey && !isIMEProcessing)) {\n                $event.preventDefault();\n                this.onAddingRequested(false, this.formValue)\n                    .catch(() => { });\n            }\n        };\n\n        listen.call(this, constants.KEYDOWN, listener, useSeparatorKeys);\n    }\n\n    /**\n     * @name setUpKeypressListeners\n     */\n    private setUpKeypressListeners(): void {\n        const listener = ($event) => {\n            const isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;\n\n            if (isCorrectKey &&\n                !this.formValue &&\n                this.items.length) {\n                this.tags.last.select.call(this.tags.last);\n            }\n        };\n\n        // setting up the keypress listeners\n        listen.call(this, constants.KEYDOWN, listener);\n    }\n\n    /**\n     * @name setUpKeydownListeners\n     */\n    private setUpInputKeydownListeners(): void {\n        this.inputForm.onKeydown.subscribe(event => {\n            if (event.key === 'Backspace' && this.formValue.trim() === '') {\n                event.preventDefault();\n            }\n        });\n    }\n\n    /**\n     * @name setUpOnPasteListener\n     */\n    private setUpOnPasteListener() {\n        const input = this.inputForm.input.nativeElement;\n\n        // attach listener to input\n        this.renderer.listen(input, 'paste', (event) => {\n            this.onPasteCallback(event);\n\n            event.preventDefault();\n            return true;\n        });\n    }\n\n    /**\n     * @name setUpTextChangeSubscriber\n     */\n    private setUpTextChangeSubscriber(): void {\n        this.inputForm.form\n            .valueChanges\n            .pipe(\n                debounceTime(this.onTextChangeDebounce)\n            )\n            .subscribe((value: { item: string }) => {\n                this.onTextChange.emit(value.item);\n            });\n    }\n\n    /**\n     * @name setUpOnBlurSubscriber\n     */\n    private setUpOnBlurSubscriber(): void {\n        const filterFn = (): boolean => {\n            const isVisible = this.dropdown && this.dropdown.isVisible;\n            return !isVisible && !!this.formValue;\n        };\n\n        this.inputForm\n            .onBlur\n            .pipe(\n                debounceTime(100),\n                filter(filterFn)\n            )\n            .subscribe(() => {\n                const reset = () => this.setInputValue('');\n\n                if (this.addOnBlur) {\n                    return this\n                        .onAddingRequested(false, this.formValue, undefined, true)\n                        .then(reset)\n                        .catch(reset);\n                }\n\n                reset();\n            });\n    }\n\n    /**\n     * @name findDupe\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    private findDupe(tag: TagModel, isFromAutocomplete: boolean): TagModel | undefined {\n        const identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;\n        const id = tag[identifyBy];\n\n        return this.items.find(item => this.getItemValue(item) === id);\n    }\n\n    /**\n     * @name onPasteCallback\n     * @param data\n     */\n    private onPasteCallback = async (data: ClipboardEvent) => {\n        interface IEWindow extends Window {\n            clipboardData: DataTransfer;\n        }\n\n        const getText = (): string => {\n            const isIE = Boolean((window as IEWindow).clipboardData);\n            const clipboardData = isIE ? (\n                (window as IEWindow).clipboardData\n            ) : data.clipboardData;\n            const type = isIE ? 'Text' : 'text/plain';\n            return clipboardData === null ? '' : clipboardData.getData(type) || '';\n        };\n\n        const text = getText();\n\n        const requests = text\n            .split(this.pasteSplitPattern)\n            .map(item => {\n                const tag = this.createTag(item);\n                this.setInputValue(tag[this.displayBy]);\n                return this.onAddingRequested(false, tag);\n            });\n\n        const resetInput = () => setTimeout(() => this.setInputValue(''), 50);\n\n        Promise.all(requests).then(() => {\n            this.onPaste.emit(text);\n            resetInput();\n        })\n            .catch(resetInput);\n    }\n\n    /**\n     * @name setAnimationMetadata\n     */\n    private setAnimationMetadata(): void {\n        this.animationMetadata = {\n            value: 'in',\n            params: { ...this.animationDuration }\n        };\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'delete-icon',\n    templateUrl: './icon.html',\n    styleUrls: ['./icon.scss']\n})\nexport class DeleteIconComponent {}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule, FormsModule, COMPOSITION_BUFFER_MODE } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Ng2DropdownModule } from 'ng2-material-dropdown';\nimport { HighlightPipe } from './core/pipes/highlight.pipe';\nimport { DragProvider } from './core/providers/drag-provider';\nimport { OptionsProvider, Options } from './core/providers/options-provider';\nimport { TagInputComponent } from './components/tag-input/tag-input';\nimport { DeleteIconComponent } from './components/icon/icon';\nimport { TagInputForm } from './components/tag-input-form/tag-input-form.component';\nimport { TagComponent } from './components/tag/tag.component';\nimport { TagInputDropdown } from './components/dropdown/tag-input-dropdown.component';\nimport { TagRipple } from './components/tag/tag-ripple.component';\n\nconst optionsProvider = new OptionsProvider();\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule,\n        Ng2DropdownModule\n    ],\n    declarations: [\n        TagInputComponent,\n        DeleteIconComponent,\n        TagInputForm,\n        TagComponent,\n        HighlightPipe,\n        TagInputDropdown,\n        TagRipple\n    ],\n    exports: [\n        TagInputComponent,\n        DeleteIconComponent,\n        TagInputForm,\n        TagComponent,\n        HighlightPipe,\n        TagInputDropdown,\n        TagRipple\n    ],\n    providers: [\n        DragProvider,\n        { provide: COMPOSITION_BUFFER_MODE, useValue: false },\n    ]\n})\nexport class TagInputModule {\n    /**\n     * @name withDefaults\n     * @param options {Options}\n     */\n    public static withDefaults(options: Options): void {\n        optionsProvider.setOptions(options);\n    }\n}\n"]}