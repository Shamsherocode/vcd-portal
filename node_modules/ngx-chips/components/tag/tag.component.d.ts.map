{"version":3,"file":"tag.component.d.ts","sources":["tag.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, TemplateRef, ElementRef, ChangeDetectorRef, Renderer2 } from '@angular/core';\nimport { TagModel } from '../../core/accessor';\nimport { TagRipple } from '../tag/tag-ripple.component';\nimport { EventLike } from '../../core/helpers/event-like';\nexport declare class TagComponent {\n    element: ElementRef;\n    renderer: Renderer2;\n    private cdRef;\n    /**\n     * @name model {TagModel}\n     */\n    model: TagModel;\n    /**\n     * @name removable {boolean}\n     */\n    removable: boolean;\n    /**\n     * @name editable {boolean}\n     */\n    editable: boolean;\n    /**\n     * @name template {TemplateRef<any>}\n     */\n    template: TemplateRef<any>;\n    /**\n     * @name displayBy {string}\n     */\n    displayBy: string;\n    /**\n     * @name identifyBy {string}\n     */\n    identifyBy: string;\n    /**\n     * @name index {number}\n     */\n    index: number;\n    /**\n     * @name hasRipple\n     */\n    hasRipple: boolean;\n    /**\n     * @name disabled\n     */\n    disabled: boolean;\n    /**\n     * @name canAddTag\n     */\n    canAddTag: (tag: TagModel) => boolean;\n    /**\n     * @name onSelect\n     */\n    onSelect: EventEmitter<TagModel>;\n    /**\n     * @name onRemove\n     */\n    onRemove: EventEmitter<TagModel>;\n    /**\n     * @name onBlur\n     */\n    onBlur: EventEmitter<TagModel>;\n    /**\n     * @name onKeyDown\n     */\n    onKeyDown: EventEmitter<any>;\n    /**\n     * @name onTagEdited\n     */\n    onTagEdited: EventEmitter<TagModel>;\n    /**\n     * @name readonly {boolean}\n     */\n    readonly readonly: boolean;\n    /**\n     * @name editing\n     */\n    editing: boolean;\n    /**\n     * @name moving\n     */\n    moving: boolean;\n    /**\n     * @name rippleState\n     */\n    rippleState: string;\n    /**\n     * @name ripple {TagRipple}\n     */\n    ripple: TagRipple;\n    constructor(element: ElementRef, renderer: Renderer2, cdRef: ChangeDetectorRef);\n    /**\n     * @name select\n     */\n    select($event?: MouseEvent): void;\n    /**\n     * @name remove\n     */\n    remove($event: MouseEvent): void;\n    /**\n     * @name focus\n     */\n    focus(): void;\n    move(): void;\n    /**\n     * @name keydown\n     * @param event\n     */\n    keydown(event: EventLike): void;\n    /**\n     * @name blink\n     */\n    blink(): void;\n    /**\n     * @name toggleEditMode\n     */\n    toggleEditMode(): void;\n    /**\n     * @name onBlurred\n     * @param event\n     */\n    onBlurred(event: any): void;\n    /**\n     * @name getDisplayValue\n     * @param item\n     */\n    getDisplayValue(item: TagModel): string;\n    /**\n     * @desc returns whether the ripple is visible or not\n     * only works in Chrome\n     * @name isRippleVisible\n     */\n    readonly isRippleVisible: boolean;\n    /**\n     * @name disableEditMode\n     * @param $event\n     */\n    disableEditMode($event?: EventLike): void;\n    /**\n     * @name isDeleteIconVisible\n     */\n    isDeleteIconVisible(): boolean;\n    /**\n     * @name getContentEditableText\n     */\n    private getContentEditableText;\n    /**\n     * @name setContentEditableText\n     * @param model\n     */\n    private setContentEditableText;\n    /**\n     * @name\n     */\n    private activateEditMode;\n    /**\n     * @name storeNewValue\n     * @param input\n     */\n    private storeNewValue;\n    /**\n     * @name getContentEditable\n     */\n    private getContentEditable;\n}\n"]}