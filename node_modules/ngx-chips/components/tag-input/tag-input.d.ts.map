{"version":3,"file":"tag-input.d.ts","sources":["tag-input.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, Renderer2, OnInit, TemplateRef, QueryList, AfterViewInit } from '@angular/core';\nimport { AsyncValidatorFn, ValidatorFn } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { TagInputAccessor, TagModel } from '../../core/accessor';\nimport { DragProvider } from '../../core/providers/drag-provider';\nimport { TagInputForm } from '../tag-input-form/tag-input-form.component';\nimport { TagComponent } from '../tag/tag.component';\nimport { TagInputDropdown } from '../dropdown/tag-input-dropdown.component';\nexport declare class TagInputComponent extends TagInputAccessor implements OnInit, AfterViewInit {\n    private readonly renderer;\n    readonly dragProvider: DragProvider;\n    /**\n     * @name separatorKeys\n     * @desc keyboard keys with which a user can separate items\n     */\n    separatorKeys: string[];\n    /**\n     * @name separatorKeyCodes\n     * @desc keyboard key codes with which a user can separate items\n     */\n    separatorKeyCodes: number[];\n    /**\n     * @name placeholder\n     * @desc the placeholder of the input text\n     */\n    placeholder: string;\n    /**\n     * @name secondaryPlaceholder\n     * @desc placeholder to appear when the input is empty\n     */\n    secondaryPlaceholder: string;\n    /**\n     * @name maxItems\n     * @desc maximum number of items that can be added\n     */\n    maxItems: number;\n    /**\n     * @name validators\n     * @desc array of Validators that are used to validate the tag before it gets appended to the list\n     */\n    validators: ValidatorFn[];\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     */\n    asyncValidators: AsyncValidatorFn[];\n    /**\n    * - if set to true, it will only possible to add items from the autocomplete\n    * @name onlyFromAutocomplete\n    */\n    onlyFromAutocomplete: boolean;\n    /**\n     * @name errorMessages\n     */\n    errorMessages: {\n        [key: string]: string;\n    };\n    /**\n     * @name theme\n     */\n    theme: string;\n    /**\n     * @name onTextChangeDebounce\n     */\n    onTextChangeDebounce: number;\n    /**\n     * - custom id assigned to the input\n     * @name id\n     */\n    inputId: string;\n    /**\n     * - custom class assigned to the input\n     */\n    inputClass: string;\n    /**\n     * - option to clear text input when the form is blurred\n     * @name clearOnBlur\n     */\n    clearOnBlur: boolean;\n    /**\n     * - hideForm\n     * @name clearOnBlur\n     */\n    hideForm: boolean;\n    /**\n     * @name addOnBlur\n     */\n    addOnBlur: boolean;\n    /**\n     * @name addOnPaste\n     */\n    addOnPaste: boolean;\n    /**\n     * - pattern used with the native method split() to separate patterns in the string pasted\n     * @name pasteSplitPattern\n     */\n    pasteSplitPattern: string | RegExp;\n    /**\n     * @name blinkIfDupe\n     */\n    blinkIfDupe: boolean;\n    /**\n     * @name removable\n     */\n    removable: boolean;\n    /**\n     * @name editable\n     */\n    editable: boolean;\n    /**\n     * @name allowDupes\n     */\n    allowDupes: boolean;\n    /**\n     * @description if set to true, the newly added tags will be added as strings, and not objects\n     * @name modelAsStrings\n     */\n    modelAsStrings: boolean;\n    /**\n     * @name trimTags\n     */\n    trimTags: boolean;\n    /**\n     * @name inputText\n     */\n    /**\n    * @name inputText\n    * @param text\n    */\n    inputText: string;\n    /**\n     * @name ripple\n     */\n    ripple: boolean;\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     */\n    tabindex: string;\n    /**\n     * @name disable\n     */\n    disable: boolean;\n    /**\n     * @name dragZone\n     */\n    dragZone: string;\n    /**\n     * @name onRemoving\n     */\n    onRemoving: (tag: TagModel) => Observable<TagModel>;\n    /**\n     * @name onAdding\n     */\n    onAdding: (tag: TagModel) => Observable<TagModel>;\n    /**\n     * @name animationDuration\n     */\n    animationDuration: {\n        enter: string;\n        leave: string;\n    };\n    /**\n     * @name onAdd\n     * @desc event emitted when adding a new item\n     */\n    onAdd: EventEmitter<TagModel>;\n    /**\n     * @name onRemove\n     * @desc event emitted when removing an existing item\n     */\n    onRemove: EventEmitter<TagModel>;\n    /**\n     * @name onSelect\n     * @desc event emitted when selecting an item\n     */\n    onSelect: EventEmitter<TagModel>;\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is focused\n     */\n    onFocus: EventEmitter<string>;\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is blurred\n     */\n    onBlur: EventEmitter<string>;\n    /**\n     * @name onTextChange\n     * @desc event emitted when the input value changes\n     */\n    onTextChange: EventEmitter<TagModel>;\n    /**\n     * - output triggered when text is pasted in the form\n     * @name onPaste\n     */\n    onPaste: EventEmitter<string>;\n    /**\n     * - output triggered when tag entered is not valid\n     * @name onValidationError\n     */\n    onValidationError: EventEmitter<TagModel>;\n    /**\n     * - output triggered when tag is edited\n     * @name onTagEdited\n     */\n    onTagEdited: EventEmitter<TagModel>;\n    /**\n     * @name dropdown\n     */\n    dropdown: TagInputDropdown;\n    /**\n     * @name template\n     * @desc reference to the template if provided by the user\n     */\n    templates: QueryList<TemplateRef<any>>;\n    /**\n     * @name inputForm\n     */\n    inputForm: TagInputForm;\n    /**\n     * @name selectedTag\n     * @desc reference to the current selected tag\n     */\n    selectedTag: TagModel | undefined;\n    /**\n     * @name isLoading\n     */\n    isLoading: boolean;\n    /**\n     * @name tags\n     * @desc list of Element items\n     */\n    tags: QueryList<TagComponent>;\n    /**\n     * @name listeners\n     * @desc array of events that get fired using @fireEvents\n     */\n    private listeners;\n    /**\n     * @description emitter for the 2-way data binding inputText value\n     * @name inputTextChange\n     */\n    inputTextChange: EventEmitter<string>;\n    /**\n     * @description private variable to bind get/set\n     * @name inputTextValue\n     */\n    inputTextValue: string;\n    /**\n     * @desc removes the tab index if it is set - it will be passed through to the input\n     * @name tabindexAttr\n     */\n    readonly tabindexAttr: string;\n    /**\n     * @name animationMetadata\n     */\n    animationMetadata: {\n        value: string;\n        params: object;\n    };\n    errors: string[];\n    isProgressBarVisible$: Observable<boolean>;\n    constructor(renderer: Renderer2, dragProvider: DragProvider);\n    /**\n     * @name ngAfterViewInit\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @name ngOnInit\n     */\n    ngOnInit(): void;\n    /**\n     * @name onRemoveRequested\n     * @param tag\n     * @param index\n     */\n    onRemoveRequested(tag: TagModel, index: number): Promise<TagModel>;\n    /**\n     * @name onAddingRequested\n     * @param fromAutocomplete {boolean}\n     * @param tag {TagModel}\n     * @param index? {number}\n     * @param giveupFocus? {boolean}\n     */\n    onAddingRequested(fromAutocomplete: boolean, tag: TagModel, index?: number, giveupFocus?: boolean): Promise<TagModel>;\n    /**\n     * @name appendTag\n     * @param tag {TagModel}\n     */\n    appendTag: (tag: TagModel, index?: number) => void;\n    /**\n     * @name createTag\n     * @param model\n     */\n    createTag: (model: TagModel) => TagModel;\n    /**\n     * @name selectItem\n     * @desc selects item passed as parameter as the selected tag\n     * @param item\n     * @param emit\n     */\n    selectItem(item: TagModel | undefined, emit?: boolean): void;\n    /**\n     * @name fireEvents\n     * @desc goes through the list of the events for a given eventName, and fires each of them\n     * @param eventName\n     * @param $event\n     */\n    fireEvents(eventName: string, $event?: any): void;\n    /**\n     * @name handleKeydown\n     * @desc handles action when the user hits a keyboard key\n     * @param data\n     */\n    handleKeydown(data: any): void;\n    onFormSubmit(): Promise<void>;\n    /**\n     * @name setInputValue\n     * @param value\n     */\n    setInputValue(value: string, emitEvent?: boolean): void;\n    /**\n     * @name getControl\n     */\n    private getControl;\n    /**\n     * @name focus\n     * @param applyFocus\n     * @param displayAutocomplete\n     */\n    focus(applyFocus?: boolean, displayAutocomplete?: boolean): void;\n    /**\n     * @name blur\n     */\n    blur(): void;\n    /**\n     * @name hasErrors\n     */\n    hasErrors(): boolean;\n    /**\n     * @name isInputFocused\n     */\n    isInputFocused(): boolean;\n    /**\n     * - this is the one way I found to tell if the template has been passed and it is not\n     * the template for the menu item\n     * @name hasCustomTemplate\n     */\n    hasCustomTemplate(): boolean;\n    /**\n     * @name maxItemsReached\n     */\n    readonly maxItemsReached: boolean;\n    /**\n     * @name formValue\n     */\n    readonly formValue: string;\n    /**3\n     * @name onDragStarted\n     * @param event\n     * @param index\n     */\n    onDragStarted(event: DragEvent, tag: TagModel, index: number): void;\n    /**\n     * @name onDragOver\n     * @param event\n     */\n    onDragOver(event: DragEvent, index?: number): void;\n    /**\n     * @name onTagDropped\n     * @param event\n     * @param index\n     */\n    onTagDropped(event: DragEvent, index?: number): void;\n    /**\n     * @name isDropping\n     */\n    isDropping(): boolean;\n    /**\n     * @name onTagBlurred\n     * @param changedElement {TagModel}\n     * @param index {number}\n     */\n    onTagBlurred(changedElement: TagModel, index: number): void;\n    /**\n     * @name trackBy\n     * @param items\n     */\n    trackBy(index: number, item: TagModel): string;\n    /**\n     * @name updateEditedTag\n     * @param tag\n     */\n    updateEditedTag({ tag, index }: {\n        tag: TagModel;\n        index: number;\n    }): void;\n    /**\n     *\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    isTagValid: (tag: TagModel, fromAutocomplete?: boolean) => boolean;\n    /**\n     * @name moveToTag\n     * @param item\n     * @param direction\n     */\n    private moveToTag;\n    /**\n     * @name isFirstTag\n     * @param item {TagModel}\n     */\n    private isFirstTag;\n    /**\n     * @name isLastTag\n     * @param item {TagModel}\n     */\n    private isLastTag;\n    /**\n     * @name getTagIndex\n     * @param item\n     */\n    private getTagIndex;\n    /**\n     * @name getTagAtIndex\n     * @param index\n     */\n    private getTagAtIndex;\n    /**\n     * @name removeItem\n     * @desc removes an item from the array of the model\n     * @param tag {TagModel}\n     * @param index {number}\n     */\n    removeItem(tag: TagModel, index: number): void;\n    /**\n     * @name addItem\n     * @desc adds the current text model to the items array\n     * @param fromAutocomplete {boolean}\n     * @param item {TagModel}\n     * @param index? {number}\n     * @param giveupFocus? {boolean}\n     */\n    private addItem;\n    /**\n     * @name setupSeparatorKeysListener\n     */\n    private setupSeparatorKeysListener;\n    /**\n     * @name setUpKeypressListeners\n     */\n    private setUpKeypressListeners;\n    /**\n     * @name setUpKeydownListeners\n     */\n    private setUpInputKeydownListeners;\n    /**\n     * @name setUpOnPasteListener\n     */\n    private setUpOnPasteListener;\n    /**\n     * @name setUpTextChangeSubscriber\n     */\n    private setUpTextChangeSubscriber;\n    /**\n     * @name setUpOnBlurSubscriber\n     */\n    private setUpOnBlurSubscriber;\n    /**\n     * @name findDupe\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    private findDupe;\n    /**\n     * @name onPasteCallback\n     * @param data\n     */\n    private onPasteCallback;\n    /**\n     * @name setAnimationMetadata\n     */\n    private setAnimationMetadata;\n}\n"]}