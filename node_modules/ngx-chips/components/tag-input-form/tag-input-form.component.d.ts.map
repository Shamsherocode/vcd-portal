{"version":3,"file":"tag-input-form.component.d.ts","sources":["tag-input-form.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { AsyncValidatorFn, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\nexport declare class TagInputForm implements OnInit, OnChanges {\n    /**\n     * @name onSubmit\n     */\n    onSubmit: EventEmitter<any>;\n    /**\n     * @name onBlur\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * @name onFocus\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * @name onKeyup\n     */\n    onKeyup: EventEmitter<any>;\n    /**\n     * @name onKeydown\n     */\n    onKeydown: EventEmitter<any>;\n    /**\n     * @name inputTextChange\n     */\n    inputTextChange: EventEmitter<string>;\n    /**\n     * @name placeholder\n     */\n    placeholder: string;\n    /**\n     * @name validators\n     */\n    validators: ValidatorFn[];\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     */\n    asyncValidators: AsyncValidatorFn[];\n    /**\n     * @name inputId\n     */\n    inputId: string;\n    /**\n     * @name inputClass\n     */\n    inputClass: string;\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     */\n    tabindex: string;\n    /**\n     * @name disabled\n     */\n    disabled: boolean;\n    /**\n     * @name input\n     */\n    input: any;\n    /**\n     * @name form\n     */\n    form: FormGroup;\n    /**\n     * @name inputText\n     */\n    /**\n    * @name inputText\n    * @param text {string}\n    */\n    inputText: string;\n    private readonly item;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * @name value\n     */\n    readonly value: FormControl;\n    /**\n     * @name isInputFocused\n     */\n    isInputFocused(): boolean;\n    /**\n     * @name getErrorMessages\n     * @param messages\n     */\n    getErrorMessages(messages: {\n        [key: string]: string;\n    }): string[];\n    /**\n     * @name hasErrors\n     */\n    hasErrors(): boolean;\n    /**\n     * @name focus\n     */\n    focus(): void;\n    /**\n     * @name blur\n     */\n    blur(): void;\n    /**\n     * @name getElementPosition\n     */\n    getElementPosition(): ClientRect;\n    /**\n     * - removes input from the component\n     * @name destroy\n     */\n    destroy(): void;\n    /**\n     * @name onKeyDown\n     * @param $event\n     */\n    onKeyDown($event: any): void;\n    /**\n     * @name onKeyUp\n     * @param $event\n     */\n    onKeyUp($event: any): void;\n    /**\n     * @name submit\n     */\n    submit($event: any): void;\n}\n"]}