{"version":3,"file":"tag-input-dropdown.component.d.ts","sources":["tag-input-dropdown.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, Injector, QueryList, TemplateRef, AfterViewInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Ng2Dropdown, Ng2MenuItem } from 'ng2-material-dropdown';\nimport { TagModel } from '../../core/accessor';\nimport { TagInputComponent } from '../tag-input/tag-input';\nexport declare class TagInputDropdown implements AfterViewInit {\n    private readonly injector;\n    /**\n     * @name dropdown\n     */\n    dropdown: Ng2Dropdown;\n    /**\n     * @name menuTemplate\n     * @desc reference to the template if provided by the user\n     */\n    templates: QueryList<TemplateRef<any>>;\n    /**\n     * @name offset\n     */\n    offset: string;\n    /**\n     * @name focusFirstElement\n     */\n    focusFirstElement: boolean;\n    /**\n     * - show autocomplete dropdown if the value of input is empty\n     * @name showDropdownIfEmpty\n     */\n    showDropdownIfEmpty: boolean;\n    /**\n     * @description observable passed as input which populates the autocomplete items\n     * @name autocompleteObservable\n     */\n    autocompleteObservable: (text: string) => Observable<any>;\n    /**\n     * - desc minimum text length in order to display the autocomplete dropdown\n     * @name minimumTextLength\n     */\n    minimumTextLength: number;\n    /**\n     * - number of items to display in the autocomplete dropdown\n     * @name limitItemsTo\n     */\n    limitItemsTo: number;\n    /**\n     * @name displayBy\n     */\n    displayBy: string;\n    /**\n     * @name identifyBy\n     */\n    identifyBy: string;\n    /**\n     * @description a function a developer can use to implement custom matching for the autocomplete\n     * @name matchingFn\n     */\n    matchingFn: (value: string, target: TagModel) => boolean;\n    /**\n     * @name appendToBody\n     */\n    appendToBody: boolean;\n    /**\n     * @name keepOpen\n     * @description option to leave dropdown open when adding a new item\n     */\n    keepOpen: boolean;\n    /**\n     * @name dynamicUpdate\n     */\n    dynamicUpdate: boolean;\n    /**\n     * @name zIndex\n     */\n    zIndex: number;\n    /**\n     * list of items that match the current value of the input (for autocomplete)\n     * @name items\n     */\n    items: TagModel[];\n    /**\n     * @name tagInput\n     */\n    tagInput: TagInputComponent;\n    /**\n     * @name _autocompleteItems\n     */\n    private _autocompleteItems;\n    /**\n     * @name autocompleteItems\n     * @param items\n     */\n    /**\n    * @name autocompleteItems\n    * @desc array of items that will populate the autocomplete\n    */\n    autocompleteItems: TagModel[];\n    constructor(injector: Injector);\n    /**\n     * @name ngAfterviewInit\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @name updatePosition\n     */\n    updatePosition(): void;\n    /**\n     * @name isVisible\n     */\n    readonly isVisible: boolean;\n    /**\n     * @name onHide\n     */\n    onHide(): EventEmitter<Ng2Dropdown>;\n    /**\n     * @name onItemClicked\n     */\n    onItemClicked(): EventEmitter<string>;\n    /**\n     * @name selectedItem\n     */\n    readonly selectedItem: Ng2MenuItem;\n    /**\n     * @name state\n     */\n    readonly state: any;\n    /**\n     *\n     * @name show\n     */\n    show: () => void;\n    /**\n     * @name hide\n     */\n    hide(): void;\n    /**\n     * @name scrollListener\n     */\n    scrollListener(): void;\n    /**\n     * @name onWindowBlur\n     */\n    onWindowBlur(): void;\n    /**\n     * @name getFormValue\n     */\n    private getFormValue;\n    /**\n     * @name calculatePosition\n     */\n    private calculatePosition;\n    /**\n     * @name requestAdding\n     * @param item {Ng2MenuItem}\n     */\n    private requestAdding;\n    /**\n     * @name createTagModel\n     * @param item\n     */\n    private createTagModel;\n    /**\n     *\n     * @param value {string}\n     */\n    private getMatchingItems;\n    /**\n     * @name setItems\n     */\n    private setItems;\n    /**\n     * @name resetItems\n     */\n    private resetItems;\n    /**\n     * @name populateItems\n     * @param data\n     */\n    private populateItems;\n    /**\n     * @name getItemsFromObservable\n     * @param text\n     */\n    private getItemsFromObservable;\n    /**\n     * @name setLoadingState\n     * @param state\n     */\n    private setLoadingState;\n}\n"]}